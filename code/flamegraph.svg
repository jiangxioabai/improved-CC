<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1366.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1349" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1349" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (49,486,183 samples, 0.02%)</title><rect x="689.6" y="1205" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="692.57" y="1215.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (24,693,992 samples, 0.01%)</title><rect x="711.9" y="1109" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="714.91" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,251,018,233 samples, 0.53%)</title><rect x="558.1" y="1173" width="6.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="561.05" y="1183.5" ></text>
</g>
<g >
<title>operator new (47,552,426 samples, 0.02%)</title><rect x="756.4" y="1093" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="759.41" y="1103.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,524,273 samples, 0.01%)</title><rect x="556.7" y="1173" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="559.75" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::_M_ptr (23,264,983 samples, 0.01%)</title><rect x="274.9" y="1157" width="0.1" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="277.87" y="1167.5" ></text>
</g>
<g >
<title>set_root (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1109" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1192.85" y="1119.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (48,483,391 samples, 0.02%)</title><rect x="681.8" y="1173" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="684.80" y="1183.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1061" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="738.13" y="1071.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::end (69,399,765 samples, 0.03%)</title><rect x="1098.9" y="1221" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1101.92" y="1231.5" ></text>
</g>
<g >
<title>page_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1253" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="194.61" y="1263.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (24,693,992 samples, 0.01%)</title><rect x="711.9" y="1093" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="714.91" y="1103.5" ></text>
</g>
<g >
<title>__handle_mm_fault (96,871,213 samples, 0.04%)</title><rect x="190.3" y="1173" width="0.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="193.29" y="1183.5" ></text>
</g>
<g >
<title>[CCAnr] (24,380,359 samples, 0.01%)</title><rect x="629.7" y="1173" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="632.66" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (213,366,542 samples, 0.09%)</title><rect x="722.6" y="1093" width="1.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="725.55" y="1103.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (142,564,991 samples, 0.06%)</title><rect x="173.2" y="1269" width="0.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="176.19" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (563,137,728 samples, 0.24%)</title><rect x="585.6" y="1125" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="588.64" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::begin (71,659,196 samples, 0.03%)</title><rect x="674.9" y="1189" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="677.95" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23,525,172 samples, 0.01%)</title><rect x="593.4" y="1157" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="596.45" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (140,347,301 samples, 0.06%)</title><rect x="535.7" y="1173" width="0.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="538.70" y="1183.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::pair&lt;int, int&gt; const&amp;&gt;::tuple&lt;true, true&gt; (22,596,943 samples, 0.01%)</title><rect x="277.8" y="1237" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="280.81" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (72,663,190 samples, 0.03%)</title><rect x="1014.2" y="1141" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1017.20" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (262,538,781 samples, 0.11%)</title><rect x="1049.7" y="1189" width="1.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1052.75" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (378,961,810 samples, 0.16%)</title><rect x="526.1" y="1125" width="1.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="529.15" y="1135.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (290,630,941 samples, 0.12%)</title><rect x="1163.5" y="1269" width="1.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1166.53" y="1279.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::begin (922,660,931 samples, 0.39%)</title><rect x="1062.2" y="1173" width="4.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1065.19" y="1183.5" ></text>
</g>
<g >
<title>do_user_addr_fault (120,966,920 samples, 0.05%)</title><rect x="190.2" y="1205" width="0.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="193.17" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_M_get (24,364,645 samples, 0.01%)</title><rect x="1129.2" y="1125" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1132.20" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (95,104,328 samples, 0.04%)</title><rect x="687.6" y="1205" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="690.56" y="1215.5" ></text>
</g>
<g >
<title>[CCAnr] (23,232,452 samples, 0.01%)</title><rect x="700.0" y="1157" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="702.95" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false, false&gt;::_Node_iterator (119,890,567 samples, 0.05%)</title><rect x="438.6" y="1205" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="441.64" y="1215.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (48,539,905 samples, 0.02%)</title><rect x="235.1" y="1285" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="238.11" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (417,809,565 samples, 0.18%)</title><rect x="737.8" y="1077" width="2.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="740.76" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (92,488,210 samples, 0.04%)</title><rect x="1024.9" y="1061" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1027.85" y="1071.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::find (170,736,355 samples, 0.07%)</title><rect x="909.6" y="1189" width="0.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="912.58" y="1199.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (122,215,493 samples, 0.05%)</title><rect x="877.1" y="1093" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="880.12" y="1103.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000000000l&gt;, double, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (112,666,344 samples, 0.05%)</title><rect x="1092.3" y="1205" width="0.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1095.33" y="1215.5" ></text>
</g>
<g >
<title>ip_sublist_rcv_finish (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1077" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="275.07" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (47,936,227 samples, 0.02%)</title><rect x="614.1" y="1109" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="617.09" y="1119.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1141" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1127.05" y="1151.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,951,894 samples, 0.02%)</title><rect x="793.9" y="1189" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="796.91" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (169,746,513 samples, 0.07%)</title><rect x="570.0" y="1173" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="573.01" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (144,100,410 samples, 0.06%)</title><rect x="1034.4" y="1125" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1037.40" y="1135.5" ></text>
</g>
<g >
<title>[CCAnr] (24,009,049 samples, 0.01%)</title><rect x="867.6" y="1125" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="870.56" y="1135.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1285" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.94" y="1295.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1109" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="738.13" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (20,118,282 samples, 0.01%)</title><rect x="883.0" y="1109" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="885.98" y="1119.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (44,307,403 samples, 0.02%)</title><rect x="724.1" y="1093" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="727.08" y="1103.5" ></text>
</g>
<g >
<title>do_faccessat (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1189" width="0.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.85" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::base (48,229,960 samples, 0.02%)</title><rect x="372.7" y="1205" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="375.74" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (234,931,696 samples, 0.10%)</title><rect x="505.0" y="1125" width="1.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="508.04" y="1135.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (96,234,429 samples, 0.04%)</title><rect x="1184.7" y="1285" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1187.75" y="1295.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::size (22,718,417 samples, 0.01%)</title><rect x="687.0" y="1205" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="689.96" y="1215.5" ></text>
</g>
<g >
<title>operator new (394,285,677 samples, 0.17%)</title><rect x="760.3" y="1077" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="763.31" y="1087.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find (145,254,012 samples, 0.06%)</title><rect x="276.3" y="1221" width="0.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="279.32" y="1231.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (72,682,325 samples, 0.03%)</title><rect x="913.8" y="1173" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="916.76" y="1183.5" ></text>
</g>
<g >
<title>cap_vm_enough_memory (24,687,924 samples, 0.01%)</title><rect x="1185.5" y="1157" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1188.48" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (70,288,604 samples, 0.03%)</title><rect x="953.0" y="1157" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="955.95" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (21,958,057 samples, 0.01%)</title><rect x="948.7" y="1157" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="951.67" y="1167.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (71,301,033 samples, 0.03%)</title><rect x="566.4" y="1205" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="569.43" y="1215.5" ></text>
</g>
<g >
<title>ip_list_rcv (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1109" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="275.07" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (708,571,537 samples, 0.30%)</title><rect x="632.0" y="1173" width="3.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="635.05" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (300,409,776 samples, 0.13%)</title><rect x="683.9" y="1173" width="1.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="686.93" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (24,105,452 samples, 0.01%)</title><rect x="884.0" y="1141" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="887.03" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,158,442,625 samples, 0.49%)</title><rect x="584.5" y="1141" width="5.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="587.45" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (68,881,895 samples, 0.03%)</title><rect x="808.9" y="1173" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="811.87" y="1183.5" ></text>
</g>
<g >
<title>is_valuable_for_critical (20,862,555,906 samples, 8.83%)</title><rect x="934.6" y="1205" width="104.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="937.61" y="1215.5" >is_valuable_..</text>
</g>
<g >
<title>do_anonymous_page (96,871,213 samples, 0.04%)</title><rect x="190.3" y="1157" width="0.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="193.29" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (647,359,968 samples, 0.27%)</title><rect x="1126.2" y="1189" width="3.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1129.21" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (235,635,944 samples, 0.10%)</title><rect x="468.2" y="1157" width="1.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="471.20" y="1167.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (24,791,014 samples, 0.01%)</title><rect x="909.0" y="1141" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="912.04" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (47,011,263 samples, 0.02%)</title><rect x="1004.0" y="1061" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1007.01" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (266,059,889 samples, 0.11%)</title><rect x="888.0" y="1141" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="891.03" y="1151.5" ></text>
</g>
<g >
<title>path_init (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1125" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1192.85" y="1135.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::end (800,397,070 samples, 0.34%)</title><rect x="859.6" y="1173" width="4.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="862.56" y="1183.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (20,121,783 samples, 0.01%)</title><rect x="671.9" y="869" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="674.92" y="879.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (23,161,563 samples, 0.01%)</title><rect x="999.4" y="1061" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1002.42" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (47,700,885 samples, 0.02%)</title><rect x="1122.0" y="1173" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1125.04" y="1183.5" ></text>
</g>
<g >
<title>std::operator- (239,318,719 samples, 0.10%)</title><rect x="424.5" y="1221" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="427.49" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (1,276,349,057 samples, 0.54%)</title><rect x="195.0" y="1253" width="6.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="198.05" y="1263.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::empty (23,139,552 samples, 0.01%)</title><rect x="1091.2" y="1205" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1094.15" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (15,626,318,179 samples, 6.61%)</title><rect x="694.3" y="1189" width="78.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="697.27" y="1199.5" >std::_Has..</text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (352,616,390 samples, 0.15%)</title><rect x="1186.2" y="1285" width="1.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1189.18" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (478,161,963 samples, 0.20%)</title><rect x="13.7" y="1221" width="2.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1231.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;::duration&lt;double, void&gt; (47,040,726 samples, 0.02%)</title><rect x="1094.5" y="1173" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1097.53" y="1183.5" ></text>
</g>
<g >
<title>do_user_addr_fault (618,102,425 samples, 0.26%)</title><rect x="228.3" y="1221" width="3.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="231.28" y="1231.5" ></text>
</g>
<g >
<title>net_rx_action (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1029" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="895.56" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (24,965,148 samples, 0.01%)</title><rect x="608.4" y="1157" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="611.45" y="1167.5" ></text>
</g>
<g >
<title>task_tick_fair (23,161,563 samples, 0.01%)</title><rect x="999.4" y="949" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1002.42" y="959.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (73,387,717 samples, 0.03%)</title><rect x="190.8" y="1253" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="193.77" y="1263.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,813,424 samples, 0.01%)</title><rect x="275.8" y="1141" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="278.80" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,153,449 samples, 0.01%)</title><rect x="13.8" y="1157" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="16.84" y="1167.5" ></text>
</g>
<g >
<title>__do_page_fault (145,051,908 samples, 0.06%)</title><rect x="188.9" y="1221" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="191.86" y="1231.5" ></text>
</g>
<g >
<title>free_unref_page_commit (20,121,783 samples, 0.01%)</title><rect x="671.9" y="693" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="674.92" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (117,106,097 samples, 0.05%)</title><rect x="897.7" y="1109" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="900.68" y="1119.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (23,838,895 samples, 0.01%)</title><rect x="897.2" y="1045" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="900.20" y="1055.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (487,762,080 samples, 0.21%)</title><rect x="1070.6" y="1141" width="2.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1073.56" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (163,535,632 samples, 0.07%)</title><rect x="1035.4" y="1109" width="0.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1038.36" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (94,620,783 samples, 0.04%)</title><rect x="1008.4" y="1045" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1011.36" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23,151,484 samples, 0.01%)</title><rect x="904.6" y="1141" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="907.59" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="581" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (47,970,976 samples, 0.02%)</title><rect x="1030.7" y="1061" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1033.74" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (112,778,065 samples, 0.05%)</title><rect x="474.7" y="1173" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="477.71" y="1183.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (47,771,560 samples, 0.02%)</title><rect x="603.4" y="1109" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="606.39" y="1119.5" ></text>
</g>
<g >
<title>__tls_get_addr (24,139,392 samples, 0.01%)</title><rect x="1044.5" y="1189" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1047.49" y="1199.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (48,806,433 samples, 0.02%)</title><rect x="868.2" y="1125" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="871.16" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_begin (23,791,861 samples, 0.01%)</title><rect x="1061.1" y="1173" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1064.12" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (20,118,263 samples, 0.01%)</title><rect x="875.5" y="1109" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="878.48" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (119,666,873 samples, 0.05%)</title><rect x="748.5" y="1141" width="0.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="751.48" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (24,002,095 samples, 0.01%)</title><rect x="1025.3" y="1045" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1028.32" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="229" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="239.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (24,851,401 samples, 0.01%)</title><rect x="190.6" y="1125" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="193.65" y="1135.5" ></text>
</g>
<g >
<title>clear_page_erms (24,561,716 samples, 0.01%)</title><rect x="190.3" y="1093" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="193.29" y="1103.5" ></text>
</g>
<g >
<title>__do_page_fault (142,076,998 samples, 0.06%)</title><rect x="1162.8" y="1237" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1165.82" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (47,141,514 samples, 0.02%)</title><rect x="1027.4" y="1077" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1030.43" y="1087.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (23,933,864 samples, 0.01%)</title><rect x="875.1" y="1061" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="878.12" y="1071.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (145,253,969 samples, 0.06%)</title><rect x="426.4" y="1205" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="429.40" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (48,193,504 samples, 0.02%)</title><rect x="590.2" y="1141" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="593.24" y="1151.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,785,059 samples, 0.01%)</title><rect x="494.7" y="1141" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="497.71" y="1151.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (311,847,001 samples, 0.13%)</title><rect x="189.6" y="1269" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="192.58" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (95,357,879 samples, 0.04%)</title><rect x="739.8" y="1077" width="0.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="742.84" y="1087.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (73,387,717 samples, 0.03%)</title><rect x="190.8" y="1237" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="193.77" y="1247.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (48,190,961 samples, 0.02%)</title><rect x="616.5" y="1125" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="619.45" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::__small_size_threshold (23,899,910 samples, 0.01%)</title><rect x="617.2" y="1173" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="620.16" y="1183.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::end (190,147,648 samples, 0.08%)</title><rect x="1151.3" y="1237" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1154.25" y="1247.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (23,883,762 samples, 0.01%)</title><rect x="559.9" y="1141" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="562.92" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (21,555,546 samples, 0.01%)</title><rect x="203.9" y="1237" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="206.88" y="1247.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1061" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="872.25" y="1071.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1093" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="194.61" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (22,738,138 samples, 0.01%)</title><rect x="1061.6" y="1141" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1064.60" y="1151.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (23,770,806 samples, 0.01%)</title><rect x="599.2" y="1109" width="0.1" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="602.21" y="1119.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,324,131 samples, 0.01%)</title><rect x="227.8" y="1269" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="230.85" y="1279.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (70,568,279 samples, 0.03%)</title><rect x="558.7" y="1157" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="561.73" y="1167.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (59,593,520 samples, 0.03%)</title><rect x="1188.2" y="1109" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1191.25" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (210,423,106 samples, 0.09%)</title><rect x="665.9" y="1125" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="668.93" y="1135.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (1,575,367,520 samples, 0.67%)</title><rect x="1157.2" y="1285" width="7.9" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1160.22" y="1295.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_remove_bucket_begin (525,939,090 samples, 0.22%)</title><rect x="590.8" y="1157" width="2.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="593.82" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (97,470,086 samples, 0.04%)</title><rect x="880.3" y="1061" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="883.31" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (1,094,374,934 samples, 0.46%)</title><rect x="204.9" y="1237" width="5.5" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="207.92" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (24,724,221 samples, 0.01%)</title><rect x="906.7" y="1141" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="909.70" y="1151.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (192,835,817 samples, 0.08%)</title><rect x="1127.8" y="1125" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1130.76" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (48,200,052 samples, 0.02%)</title><rect x="1019.5" y="1109" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1022.54" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (93,871,611 samples, 0.04%)</title><rect x="604.6" y="1157" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="607.58" y="1167.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,992,160 samples, 0.01%)</title><rect x="469.3" y="1141" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="472.25" y="1151.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1237" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="148.14" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_key_equals_tr&lt;int&gt; (284,543,503 samples, 0.12%)</title><rect x="724.3" y="1093" width="1.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="727.30" y="1103.5" ></text>
</g>
<g >
<title>__x64_sys_access (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1205" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1192.85" y="1215.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator (40,245,237 samples, 0.02%)</title><rect x="275.0" y="1189" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="277.99" y="1199.5" ></text>
</g>
<g >
<title>tick_sched_timer (23,161,563 samples, 0.01%)</title><rect x="999.4" y="1013" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1002.42" y="1023.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (48,538,730 samples, 0.02%)</title><rect x="230.9" y="1125" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="233.89" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_ptr (211,629,643 samples, 0.09%)</title><rect x="527.0" y="1093" width="1.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="529.98" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (22,547,179 samples, 0.01%)</title><rect x="1011.7" y="1109" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1014.74" y="1119.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::deallocate (22,510,402 samples, 0.01%)</title><rect x="204.0" y="1269" width="0.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="206.99" y="1279.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (24,093,733 samples, 0.01%)</title><rect x="933.5" y="1157" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="936.53" y="1167.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (46,229,190 samples, 0.02%)</title><rect x="1031.7" y="1045" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1034.69" y="1055.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Scoped_node::~_Scoped_node (46,440,123 samples, 0.02%)</title><rect x="745.7" y="1141" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="748.66" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (47,363,209 samples, 0.02%)</title><rect x="1031.0" y="1061" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1033.98" y="1071.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::pop_front (122,838,700 samples, 0.05%)</title><rect x="1149.2" y="1237" width="0.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1152.23" y="1247.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (44,824,962 samples, 0.02%)</title><rect x="879.8" y="1061" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="882.85" y="1071.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (46,178,482 samples, 0.02%)</title><rect x="574.8" y="1173" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="577.83" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (21,863,088 samples, 0.01%)</title><rect x="1098.8" y="1173" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1101.81" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::size (233,975,527 samples, 0.10%)</title><rect x="747.3" y="1141" width="1.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="750.31" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (46,590,414 samples, 0.02%)</title><rect x="677.5" y="1189" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="680.52" y="1199.5" ></text>
</g>
<g >
<title>clauseSatisfiedWithFlips (68,149,488 samples, 0.03%)</title><rect x="794.5" y="1189" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="797.51" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (166,606,988 samples, 0.07%)</title><rect x="561.3" y="1125" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="564.33" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="453" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (23,975,011 samples, 0.01%)</title><rect x="621.0" y="1205" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="624.04" y="1215.5" ></text>
</g>
<g >
<title>clear_page_erms (72,096,271 samples, 0.03%)</title><rect x="196.9" y="1045" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="199.94" y="1055.5" ></text>
</g>
<g >
<title>update_curr (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1045" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1127.05" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,431,916 samples, 0.01%)</title><rect x="1025.4" y="1061" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1028.44" y="1071.5" ></text>
</g>
<g >
<title>do_page_fault (23,932,016 samples, 0.01%)</title><rect x="188.6" y="1253" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="191.61" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (47,926,207 samples, 0.02%)</title><rect x="511.0" y="1141" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="513.98" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (47,264,926 samples, 0.02%)</title><rect x="1061.2" y="1173" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1064.24" y="1183.5" ></text>
</g>
<g >
<title>do_page_fault (164,089,830 samples, 0.07%)</title><rect x="1162.7" y="1253" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1165.71" y="1263.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (23,043,691 samples, 0.01%)</title><rect x="723.1" y="1029" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="726.15" y="1039.5" ></text>
</g>
<g >
<title>updateNonCriticalClausesInLN (6,207,115,066 samples, 2.63%)</title><rect x="1099.3" y="1221" width="31.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1102.26" y="1231.5" >up..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (23,865,284 samples, 0.01%)</title><rect x="564.2" y="1157" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="567.18" y="1167.5" ></text>
</g>
<g >
<title>pickOthers (949,183,521 samples, 0.40%)</title><rect x="1114.5" y="1205" width="4.7" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1117.46" y="1215.5" ></text>
</g>
<g >
<title>scheduler_tick (24,355,773 samples, 0.01%)</title><rect x="735.1" y="997" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="738.13" y="1007.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (143,261,503 samples, 0.06%)</title><rect x="771.6" y="1173" width="0.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="774.59" y="1183.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (238,317,249 samples, 0.10%)</title><rect x="373.0" y="1221" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="375.98" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (2,588,631,165 samples, 1.10%)</title><rect x="730.1" y="1125" width="13.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="733.14" y="1135.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (24,432,859 samples, 0.01%)</title><rect x="926.3" y="1125" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="929.34" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,401,097,057 samples, 0.59%)</title><rect x="52.4" y="1253" width="7.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="55.43" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (42,159,898 samples, 0.02%)</title><rect x="572.6" y="1205" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="575.63" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (337,984,132 samples, 0.14%)</title><rect x="1127.5" y="1141" width="1.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1130.51" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_3 (39,948,732 samples, 0.02%)</title><rect x="700.4" y="1157" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="703.40" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (141,814,498 samples, 0.06%)</title><rect x="605.3" y="1141" width="0.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="608.26" y="1151.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (208,866,546 samples, 0.09%)</title><rect x="1059.0" y="1173" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1062.03" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (44,824,962 samples, 0.02%)</title><rect x="879.8" y="1077" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="882.85" y="1087.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::allocate (21,555,546 samples, 0.01%)</title><rect x="203.9" y="1269" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="206.88" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="437" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1189" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1168.56" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (25,013,334 samples, 0.01%)</title><rect x="675.2" y="1173" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="678.18" y="1183.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (143,904,904 samples, 0.06%)</title><rect x="858.8" y="1173" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="861.84" y="1183.5" ></text>
</g>
<g >
<title>std::operator- (3,745,650,772 samples, 1.58%)</title><rect x="405.4" y="1205" width="18.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="408.41" y="1215.5" ></text>
</g>
<g >
<title>computePairScore (46,690,792 samples, 0.02%)</title><rect x="374.6" y="1221" width="0.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="377.64" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="341" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="351.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (313,011,521 samples, 0.13%)</title><rect x="14.6" y="1205" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="17.56" y="1215.5" ></text>
</g>
<g >
<title>handle_mm_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1189" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="194.61" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (46,802,825 samples, 0.02%)</title><rect x="1061.5" y="1157" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1064.48" y="1167.5" ></text>
</g>
<g >
<title>unmap_region (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1141" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1188.35" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (46,945,935 samples, 0.02%)</title><rect x="793.1" y="1189" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="796.09" y="1199.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (94,522,332 samples, 0.04%)</title><rect x="194.0" y="1269" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="196.97" y="1279.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (214,231,438 samples, 0.09%)</title><rect x="1028.9" y="1045" width="1.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1031.86" y="1055.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,161,563 samples, 0.01%)</title><rect x="999.4" y="1077" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1002.42" y="1087.5" ></text>
</g>
<g >
<title>[CCAnr] (72,193,109 samples, 0.03%)</title><rect x="659.4" y="1141" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="662.40" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (94,620,783 samples, 0.04%)</title><rect x="1008.4" y="1061" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1011.36" y="1071.5" ></text>
</g>
<g >
<title>__tls_get_addr (24,679,735 samples, 0.01%)</title><rect x="1129.6" y="1189" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1132.55" y="1199.5" ></text>
</g>
<g >
<title>ixgbe_poll (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1029" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="674.92" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (23,543,490 samples, 0.01%)</title><rect x="725.1" y="1077" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="728.13" y="1087.5" ></text>
</g>
<g >
<title>__tls_get_addr (71,607,682 samples, 0.03%)</title><rect x="576.9" y="1157" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="579.88" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_remove_bucket_begin (47,404,136 samples, 0.02%)</title><rect x="616.9" y="1173" width="0.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="619.92" y="1183.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (178,912,985 samples, 0.08%)</title><rect x="186.8" y="1269" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="189.82" y="1279.5" ></text>
</g>
<g >
<title>cpumask_any_but (24,868,799 samples, 0.01%)</title><rect x="231.1" y="1109" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="234.13" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (45,719,834 samples, 0.02%)</title><rect x="554.9" y="1205" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="557.88" y="1215.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (233,360,601 samples, 0.10%)</title><rect x="503.9" y="1109" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="506.88" y="1119.5" ></text>
</g>
<g >
<title>ret_from_intr (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1109" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="674.92" y="1119.5" ></text>
</g>
<g >
<title>page_fault (216,242,150 samples, 0.09%)</title><rect x="196.5" y="1205" width="1.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="199.45" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (116,499,413 samples, 0.05%)</title><rect x="1129.7" y="1189" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1132.68" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,766,597 samples, 0.01%)</title><rect x="279.0" y="1189" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="281.97" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (41,335,721 samples, 0.02%)</title><rect x="729.9" y="1125" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="732.93" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,907,558 samples, 0.02%)</title><rect x="611.3" y="1141" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="614.25" y="1151.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (24,349,303 samples, 0.01%)</title><rect x="926.2" y="1109" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="929.22" y="1119.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (23,189,900 samples, 0.01%)</title><rect x="589.0" y="1109" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="592.04" y="1119.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt;, void&gt; (652,073,405 samples, 0.28%)</title><rect x="1091.6" y="1221" width="3.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1094.63" y="1231.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,374,218 samples, 0.02%)</title><rect x="989.2" y="1141" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="992.15" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (46,351,979 samples, 0.02%)</title><rect x="1048.5" y="1157" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1051.55" y="1167.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (20,121,783 samples, 0.01%)</title><rect x="671.9" y="677" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="674.92" y="687.5" ></text>
</g>
<g >
<title>updatePairStructures (58,473,029,656 samples, 24.74%)</title><rect x="786.6" y="1221" width="292.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="789.61" y="1231.5" >updatePairStructures</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (90,481,870 samples, 0.04%)</title><rect x="379.8" y="1221" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="382.78" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (308,869,512 samples, 0.13%)</title><rect x="811.3" y="1173" width="1.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="814.30" y="1183.5" ></text>
</g>
<g >
<title>__do_page_fault (144,798,433 samples, 0.06%)</title><rect x="190.0" y="1221" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="193.05" y="1231.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (163,269,873 samples, 0.07%)</title><rect x="932.7" y="1141" width="0.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="935.71" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (7,693,610,245 samples, 3.26%)</title><rect x="636.3" y="1189" width="38.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="639.29" y="1199.5" >std..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::_M_valptr (23,264,983 samples, 0.01%)</title><rect x="274.9" y="1173" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="277.87" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (284,972,819 samples, 0.12%)</title><rect x="570.9" y="1189" width="1.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="573.86" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_key_equals (95,236,157 samples, 0.04%)</title><rect x="673.2" y="1157" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="676.21" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (97,624,044 samples, 0.04%)</title><rect x="693.8" y="1189" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="696.79" y="1199.5" ></text>
</g>
<g >
<title>std::operator- (72,153,847 samples, 0.03%)</title><rect x="403.6" y="1173" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="406.64" y="1183.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,151,148 samples, 0.02%)</title><rect x="1130.0" y="1157" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1133.02" y="1167.5" ></text>
</g>
<g >
<title>sync_mm_rss (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1061" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1188.35" y="1071.5" ></text>
</g>
<g >
<title>unmap_single_vma (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1109" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1188.35" y="1119.5" ></text>
</g>
<g >
<title>is_valuable_for_noncritical (470,975,104 samples, 0.20%)</title><rect x="1112.0" y="1189" width="2.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1114.99" y="1199.5" ></text>
</g>
<g >
<title>[CCAnr] (47,786,867 samples, 0.02%)</title><rect x="913.4" y="1173" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="916.39" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;long long&gt;, true&gt;::_M_cget (46,857,562 samples, 0.02%)</title><rect x="1009.3" y="1045" width="0.2" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1012.30" y="1055.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1109" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="872.25" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (446,929,247 samples, 0.19%)</title><rect x="191.7" y="1269" width="2.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="194.74" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false, false&gt;::_Node_iterator (332,665,138 samples, 0.14%)</title><rect x="552.7" y="1205" width="1.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="555.74" y="1215.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,300,397 samples, 0.01%)</title><rect x="659.8" y="1141" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="662.76" y="1151.5" ></text>
</g>
<g >
<title>[CCAnr] (24,033,413 samples, 0.01%)</title><rect x="1026.4" y="1077" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1029.37" y="1087.5" ></text>
</g>
<g >
<title>do_user_addr_fault (145,051,908 samples, 0.06%)</title><rect x="188.9" y="1205" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="191.86" y="1215.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::_M_valptr (20,167,914 samples, 0.01%)</title><rect x="275.9" y="1157" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="278.92" y="1167.5" ></text>
</g>
<g >
<title>do_page_fault (167,537,704 samples, 0.07%)</title><rect x="196.7" y="1189" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="199.69" y="1199.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (71,619,977 samples, 0.03%)</title><rect x="765.9" y="1141" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="768.94" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (23,789,793 samples, 0.01%)</title><rect x="725.8" y="1141" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="728.84" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Deallocate (95,444,222 samples, 0.04%)</title><rect x="191.1" y="1269" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="194.14" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (24,047,981 samples, 0.01%)</title><rect x="897.4" y="1093" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="900.44" y="1103.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_node (71,901,357 samples, 0.03%)</title><rect x="402.6" y="1189" width="0.3" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="405.57" y="1199.5" ></text>
</g>
<g >
<title>mmap_region (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1173" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1188.23" y="1183.5" ></text>
</g>
<g >
<title>up_read (20,146,940 samples, 0.01%)</title><rect x="1163.4" y="1221" width="0.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1166.43" y="1231.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (45,688,699 samples, 0.02%)</title><rect x="583.7" y="1141" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="586.75" y="1151.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;::count (24,201,704 samples, 0.01%)</title><rect x="1091.5" y="1221" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1094.51" y="1231.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (101,295,160 samples, 0.04%)</title><rect x="274.2" y="1189" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="277.15" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1141" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;pair_hash&gt;::__small_size_threshold (47,376,041 samples, 0.02%)</title><rect x="1062.0" y="1157" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1064.96" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (48,297,212 samples, 0.02%)</title><rect x="1033.9" y="1109" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1036.93" y="1119.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (22,257,360 samples, 0.01%)</title><rect x="725.0" y="1045" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="728.02" y="1055.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (187,175,514 samples, 0.08%)</title><rect x="233.0" y="1285" width="1.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="236.02" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="965" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (116,483,714 samples, 0.05%)</title><rect x="758.4" y="1093" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="761.41" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (23,196,053 samples, 0.01%)</title><rect x="681.3" y="1157" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="684.32" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="85" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (23,688,257 samples, 0.01%)</title><rect x="723.3" y="1077" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="726.26" y="1087.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (142,217,619 samples, 0.06%)</title><rect x="914.7" y="1173" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="917.71" y="1183.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (47,548,338 samples, 0.02%)</title><rect x="700.2" y="1157" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="703.17" y="1167.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1269" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1188.23" y="1279.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1077" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="860.08" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (120,618,950 samples, 0.05%)</title><rect x="990.7" y="1125" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="993.71" y="1135.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, int&gt; (40,263,384 samples, 0.02%)</title><rect x="275.2" y="1189" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="278.19" y="1199.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1141" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="693.04" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_M_next (23,279,962 samples, 0.01%)</title><rect x="564.3" y="1173" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="567.30" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="165" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="175.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (236,671,794 samples, 0.10%)</title><rect x="660.8" y="1141" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="663.83" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="885" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="895.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (47,011,263 samples, 0.02%)</title><rect x="1004.0" y="1045" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1007.01" y="1055.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (24,426,206 samples, 0.01%)</title><rect x="214.5" y="1237" width="0.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="217.54" y="1247.5" ></text>
</g>
<g >
<title>__tls_get_addr (43,901,099 samples, 0.02%)</title><rect x="877.7" y="1093" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="880.73" y="1103.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (335,186,651 samples, 0.14%)</title><rect x="1096.0" y="1205" width="1.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1098.96" y="1215.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (20,114,062 samples, 0.01%)</title><rect x="700.1" y="1157" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="703.07" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (727,708,752 samples, 0.31%)</title><rect x="900.2" y="1093" width="3.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="903.24" y="1103.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (48,109,499 samples, 0.02%)</title><rect x="899.2" y="1093" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="902.20" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (189,085,928 samples, 0.08%)</title><rect x="525.2" y="1125" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="528.20" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (660,215,538 samples, 0.28%)</title><rect x="889.4" y="1141" width="3.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="892.36" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (16,640,384,272 samples, 7.04%)</title><rect x="690.3" y="1205" width="83.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="693.28" y="1215.5" >std::__de..</text>
</g>
<g >
<title>update_process_times (23,161,563 samples, 0.01%)</title><rect x="999.4" y="981" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1002.42" y="991.5" ></text>
</g>
<g >
<title>run_timer_softirq (73,358,700 samples, 0.03%)</title><rect x="228.5" y="1157" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="231.52" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (169,746,513 samples, 0.07%)</title><rect x="570.0" y="1189" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="573.01" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,199,456 samples, 0.01%)</title><rect x="1089.4" y="1221" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1092.37" y="1231.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;std::__detail::_Hash_node&lt;int, false&gt;*, std::__detail::_Hash_node&lt;int, false&gt;, false&gt;::pointer_to (71,351,580 samples, 0.03%)</title><rect x="604.2" y="1141" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="607.22" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_S_forward_key (23,277,536 samples, 0.01%)</title><rect x="771.2" y="1173" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="774.23" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (97,470,086 samples, 0.04%)</title><rect x="880.3" y="1045" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="883.31" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (69,776,710 samples, 0.03%)</title><rect x="503.5" y="1093" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="506.53" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1029" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1039.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::size (211,448,706 samples, 0.09%)</title><rect x="1150.2" y="1237" width="1.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1153.20" y="1247.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (47,661,549 samples, 0.02%)</title><rect x="619.4" y="1205" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="622.39" y="1215.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound (104,628,593 samples, 0.04%)</title><rect x="276.4" y="1205" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="279.42" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_M_get (93,634,830 samples, 0.04%)</title><rect x="596.7" y="1109" width="0.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="599.73" y="1119.5" ></text>
</g>
<g >
<title>__put_page (20,121,783 samples, 0.01%)</title><rect x="671.9" y="725" width="0.1" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="674.92" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Scoped_node::_Scoped_node (209,675,194 samples, 0.09%)</title><rect x="744.6" y="1141" width="1.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="747.61" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (23,115,924 samples, 0.01%)</title><rect x="991.7" y="1141" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="994.72" y="1151.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (24,791,014 samples, 0.01%)</title><rect x="909.0" y="1125" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="912.04" y="1135.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;std::__detail::_Hash_node&lt;int, false&gt;*, std::__detail::_Hash_node&lt;int, false&gt;, false&gt;::pointer_to (95,322,881 samples, 0.04%)</title><rect x="1128.7" y="1125" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1131.72" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (5,443,456,532 samples, 2.30%)</title><rect x="579.0" y="1173" width="27.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="582.02" y="1183.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_ptr (24,785,995 samples, 0.01%)</title><rect x="505.4" y="1109" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="508.40" y="1119.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (496,776,492 samples, 0.21%)</title><rect x="197.8" y="1221" width="2.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="200.78" y="1231.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (256,394,903 samples, 0.11%)</title><rect x="442.2" y="1205" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="445.19" y="1215.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (47,133,386 samples, 0.02%)</title><rect x="952.7" y="1141" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="955.72" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (164,626,938 samples, 0.07%)</title><rect x="896.3" y="1077" width="0.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="899.26" y="1087.5" ></text>
</g>
<g >
<title>computePairDeltaOverlap (22,707,343 samples, 0.01%)</title><rect x="790.4" y="1205" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="793.38" y="1215.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_ptr (70,668,350 samples, 0.03%)</title><rect x="505.9" y="1093" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="508.86" y="1103.5" ></text>
</g>
<g >
<title>tcp_ack (20,121,783 samples, 0.01%)</title><rect x="671.9" y="805" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="674.92" y="815.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,095,861 samples, 0.01%)</title><rect x="863.9" y="1157" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="866.91" y="1167.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (352,969,380 samples, 0.15%)</title><rect x="1165.7" y="1285" width="1.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1168.68" y="1295.5" ></text>
</g>
<g >
<title>updatePairStructures (69,001,972 samples, 0.03%)</title><rect x="1156.8" y="1237" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1159.75" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (46,201,701 samples, 0.02%)</title><rect x="1127.0" y="1157" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1130.04" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (89,458,947 samples, 0.04%)</title><rect x="743.1" y="1125" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="746.06" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (22,706,451 samples, 0.01%)</title><rect x="1002.7" y="1077" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1005.71" y="1087.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (73,217,333 samples, 0.03%)</title><rect x="880.4" y="1029" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="883.43" y="1039.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (69,067,799 samples, 0.03%)</title><rect x="200.3" y="1221" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="203.26" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (24,838,194 samples, 0.01%)</title><rect x="877.9" y="1093" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="880.95" y="1103.5" ></text>
</g>
<g >
<title>__inc_numa_state (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1109" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1168.56" y="1119.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (118,215,228 samples, 0.05%)</title><rect x="516.5" y="1141" width="0.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="519.46" y="1151.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,693,992 samples, 0.01%)</title><rect x="711.9" y="1141" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="714.91" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (47,766,994 samples, 0.02%)</title><rect x="564.5" y="1189" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="567.54" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="949" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="959.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (71,813,007 samples, 0.03%)</title><rect x="600.5" y="1109" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="603.52" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;std::hash&lt;int&gt; &gt;::__small_size_threshold (24,081,334 samples, 0.01%)</title><rect x="746.6" y="1125" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="749.59" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (24,064,387 samples, 0.01%)</title><rect x="621.2" y="1205" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="624.16" y="1215.5" ></text>
</g>
<g >
<title>[CCAnr] (71,782,189 samples, 0.03%)</title><rect x="1014.7" y="1141" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1017.68" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="149" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (46,465,952 samples, 0.02%)</title><rect x="590.6" y="1141" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="593.59" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (263,334,772 samples, 0.11%)</title><rect x="1168.4" y="1285" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1171.36" y="1295.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (72,226,622 samples, 0.03%)</title><rect x="1026.5" y="1077" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1029.49" y="1087.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (446,479,984 samples, 0.19%)</title><rect x="235.4" y="1285" width="2.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="238.35" y="1295.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::allocate (24,039,924 samples, 0.01%)</title><rect x="402.8" y="1173" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="405.81" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (24,729,359 samples, 0.01%)</title><rect x="564.4" y="1189" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="567.42" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (184,572,921 samples, 0.08%)</title><rect x="1120.3" y="1157" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1123.30" y="1167.5" ></text>
</g>
<g >
<title>error_entry (24,865,137 samples, 0.01%)</title><rect x="1185.6" y="1269" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1188.60" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (47,583,734 samples, 0.02%)</title><rect x="897.1" y="1061" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="900.08" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::begin (166,985,234 samples, 0.07%)</title><rect x="1124.8" y="1189" width="0.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1127.77" y="1199.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (48,609,606 samples, 0.02%)</title><rect x="659.9" y="1141" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="662.88" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (96,197,766 samples, 0.04%)</title><rect x="1089.8" y="1221" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1092.84" y="1231.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::empty (47,107,351 samples, 0.02%)</title><rect x="1090.8" y="1189" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1093.80" y="1199.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, int&gt; (44,751,195 samples, 0.02%)</title><rect x="277.5" y="1173" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="280.49" y="1183.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (20,121,783 samples, 0.01%)</title><rect x="671.9" y="981" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="674.92" y="991.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (47,678,692 samples, 0.02%)</title><rect x="948.4" y="1157" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="951.43" y="1167.5" ></text>
</g>
<g >
<title>operator new (23,117,207 samples, 0.01%)</title><rect x="375.0" y="1221" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="377.99" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (121,096,132 samples, 0.05%)</title><rect x="812.2" y="1157" width="0.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="815.24" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="709" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_S_equals (23,955,631 samples, 0.01%)</title><rect x="673.7" y="1157" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="676.68" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (3,098,371,176 samples, 1.31%)</title><rect x="657.7" y="1157" width="15.5" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="660.74" y="1167.5" ></text>
</g>
<g >
<title>unsat (23,213,819 samples, 0.01%)</title><rect x="1156.6" y="1237" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1159.64" y="1247.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::__small_size_threshold (48,539,717 samples, 0.02%)</title><rect x="445.6" y="1205" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="448.56" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (23,043,691 samples, 0.01%)</title><rect x="723.1" y="1077" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="726.15" y="1087.5" ></text>
</g>
<g >
<title>handle_mm_fault (101,799,067 samples, 0.04%)</title><rect x="1162.8" y="1205" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1165.82" y="1215.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (72,262,754 samples, 0.03%)</title><rect x="672.8" y="1141" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="675.85" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,513,157,671 samples, 0.64%)</title><rect x="1026.1" y="1093" width="7.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1029.14" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (24,593,901 samples, 0.01%)</title><rect x="883.7" y="1141" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="886.67" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (91,490,550 samples, 0.04%)</title><rect x="756.0" y="1093" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="758.95" y="1103.5" ></text>
</g>
<g >
<title>do_user_addr_fault (167,537,704 samples, 0.07%)</title><rect x="196.7" y="1157" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="199.69" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (93,550,795 samples, 0.04%)</title><rect x="724.7" y="1077" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="727.67" y="1087.5" ></text>
</g>
<g >
<title>do_page_fault (145,051,908 samples, 0.06%)</title><rect x="188.9" y="1237" width="0.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="191.86" y="1247.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (73,712,658 samples, 0.03%)</title><rect x="763.4" y="1109" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="766.45" y="1119.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::size (1,415,500,762 samples, 0.60%)</title><rect x="926.6" y="1189" width="7.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="929.58" y="1199.5" ></text>
</g>
<g >
<title>clauseSatisfiedWithFlips (6,518,550,140 samples, 2.76%)</title><rect x="953.8" y="1157" width="32.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="956.77" y="1167.5" >cl..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (326,409,418 samples, 0.14%)</title><rect x="891.0" y="1125" width="1.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="894.03" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (69,083,322 samples, 0.03%)</title><rect x="906.4" y="1093" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="909.36" y="1103.5" ></text>
</g>
<g >
<title>operator delete (357,566,662 samples, 0.15%)</title><rect x="600.9" y="1109" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="603.88" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (215,961,285 samples, 0.09%)</title><rect x="1064.4" y="1141" width="1.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1067.43" y="1151.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (237,195,469 samples, 0.10%)</title><rect x="1036.8" y="1157" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1039.77" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (4,265,665,417 samples, 1.81%)</title><rect x="513.1" y="1157" width="21.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="516.13" y="1167.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (45,647,099 samples, 0.02%)</title><rect x="949.9" y="1157" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="952.95" y="1167.5" ></text>
</g>
<g >
<title>__count_memcg_events (23,974,972 samples, 0.01%)</title><rect x="229.0" y="1189" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="232.01" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (24,074,737 samples, 0.01%)</title><rect x="675.3" y="1173" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="678.30" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (184,639,842 samples, 0.08%)</title><rect x="605.0" y="1157" width="1.0" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="608.04" y="1167.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;&amp;, bool, true&gt; (24,058,293 samples, 0.01%)</title><rect x="771.1" y="1157" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="774.11" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,392,349,816 samples, 0.59%)</title><rect x="875.6" y="1109" width="6.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="878.58" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (70,031,799 samples, 0.03%)</title><rect x="595.2" y="1141" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="598.20" y="1151.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1173" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="693.04" y="1183.5" ></text>
</g>
<g >
<title>__asan::asan_delete (24,854,350 samples, 0.01%)</title><rect x="1128.2" y="1109" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1131.24" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_key (21,591,338 samples, 0.01%)</title><rect x="277.4" y="1189" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="280.38" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (70,329,666 samples, 0.03%)</title><rect x="672.5" y="1141" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="675.50" y="1151.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (48,871,688 samples, 0.02%)</title><rect x="197.5" y="1189" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="200.53" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (70,922,224 samples, 0.03%)</title><rect x="1013.1" y="1109" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1016.14" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (96,368,211 samples, 0.04%)</title><rect x="1032.9" y="1077" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1035.86" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,298,112,683 samples, 0.55%)</title><rect x="557.9" y="1189" width="6.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="560.94" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (93,320,756 samples, 0.04%)</title><rect x="884.4" y="1125" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="887.39" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,938,438 samples, 0.01%)</title><rect x="992.1" y="1141" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="995.07" y="1151.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (1,083,093,923 samples, 0.46%)</title><rect x="26.5" y="1253" width="5.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="29.48" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (22,078,838 samples, 0.01%)</title><rect x="1099.2" y="1189" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1102.15" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (93,634,830 samples, 0.04%)</title><rect x="596.7" y="1125" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="599.73" y="1135.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (48,600,870 samples, 0.02%)</title><rect x="867.7" y="1125" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="870.68" y="1135.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1205" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1188.23" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_key_equals (1,990,869,585 samples, 0.84%)</title><rect x="662.1" y="1141" width="9.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="665.08" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (326,836,429 samples, 0.14%)</title><rect x="861.5" y="1157" width="1.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="864.46" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (95,357,839 samples, 0.04%)</title><rect x="742.6" y="1109" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="745.59" y="1119.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (23,759,105 samples, 0.01%)</title><rect x="880.2" y="1061" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="883.19" y="1071.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (94,779,667 samples, 0.04%)</title><rect x="938.2" y="1173" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="941.19" y="1183.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::_M_pop_front_aux (136,932,561 samples, 0.06%)</title><rect x="390.2" y="1205" width="0.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="393.18" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="197" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="207.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1077" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="738.13" y="1087.5" ></text>
</g>
<g >
<title>computePairDeltaOverlap (22,823,321,684 samples, 9.66%)</title><rect x="794.8" y="1189" width="114.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="797.85" y="1199.5" >computePairDel..</text>
</g>
<g >
<title>unmap_single_vma (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1157" width="0.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1190.94" y="1167.5" ></text>
</g>
<g >
<title>sync_regs (45,987,831 samples, 0.02%)</title><rect x="232.6" y="1269" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="235.57" y="1279.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1125" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1190.94" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (214,231,438 samples, 0.09%)</title><rect x="1028.9" y="1061" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1031.86" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (47,931,633 samples, 0.02%)</title><rect x="1078.3" y="1205" width="0.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1081.34" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (600,221,091 samples, 0.25%)</title><rect x="576.0" y="1173" width="3.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="579.03" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="533" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="543.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (46,505,409 samples, 0.02%)</title><rect x="604.0" y="1141" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="606.99" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (167,966,469 samples, 0.07%)</title><rect x="759.4" y="1077" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="762.35" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_S_equals (95,757,357 samples, 0.04%)</title><rect x="672.0" y="1141" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="675.02" y="1151.5" ></text>
</g>
<g >
<title>page_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1269" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1168.56" y="1279.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate_node (22,315,975 samples, 0.01%)</title><rect x="390.2" y="1189" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="393.18" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (23,706,698 samples, 0.01%)</title><rect x="654.1" y="1141" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="657.10" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,418,914 samples, 0.01%)</title><rect x="274.7" y="1189" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="277.66" y="1199.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (46,742,497 samples, 0.02%)</title><rect x="1097.0" y="1189" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1100.04" y="1199.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (23,260,231 samples, 0.01%)</title><rect x="598.5" y="1109" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="601.49" y="1119.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,926,120 samples, 0.01%)</title><rect x="1098.9" y="1205" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1101.92" y="1215.5" ></text>
</g>
<g >
<title>update_process_times (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1013" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="738.13" y="1023.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (94,265,870 samples, 0.04%)</title><rect x="740.3" y="1061" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="743.32" y="1071.5" ></text>
</g>
<g >
<title>pthread_getspecific (261,583,944 samples, 0.11%)</title><rect x="1188.5" y="1285" width="1.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1191.54" y="1295.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (23,698,348 samples, 0.01%)</title><rect x="1127.9" y="1109" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1130.88" y="1119.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (74,190,705 samples, 0.03%)</title><rect x="389.8" y="1205" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="392.81" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="997" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1007.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (20,271,916 samples, 0.01%)</title><rect x="276.5" y="1189" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="279.52" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (22,697,595 samples, 0.01%)</title><rect x="697.0" y="1173" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="700.04" y="1183.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1189" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1127.05" y="1199.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt; (20,115,636 samples, 0.01%)</title><rect x="277.7" y="1205" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="280.71" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (847,216,785 samples, 0.36%)</title><rect x="878.1" y="1093" width="4.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="881.07" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (164,414,183 samples, 0.07%)</title><rect x="1065.7" y="1157" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1068.75" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (189,085,928 samples, 0.08%)</title><rect x="525.2" y="1109" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="528.20" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (23,204,537 samples, 0.01%)</title><rect x="506.2" y="1125" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="509.21" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (138,445,089 samples, 0.06%)</title><rect x="505.5" y="1109" width="0.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="508.52" y="1119.5" ></text>
</g>
<g >
<title>tick_sched_handle (23,161,563 samples, 0.01%)</title><rect x="999.4" y="997" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1002.42" y="1007.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (45,932,869 samples, 0.02%)</title><rect x="767.6" y="1157" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="770.58" y="1167.5" ></text>
</g>
<g >
<title>std::operator+ (24,023,987 samples, 0.01%)</title><rect x="926.5" y="1173" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="929.46" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (45,541,706 samples, 0.02%)</title><rect x="608.2" y="1141" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="611.22" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="821" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="831.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (46,220,070 samples, 0.02%)</title><rect x="493.9" y="1141" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="496.90" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (48,168,823 samples, 0.02%)</title><rect x="614.8" y="1125" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="617.81" y="1135.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator[] (1,950,103,365 samples, 0.83%)</title><rect x="916.7" y="1173" width="9.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="919.72" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (23,043,691 samples, 0.01%)</title><rect x="723.1" y="1045" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="726.15" y="1055.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (20,116,713 samples, 0.01%)</title><rect x="1043.6" y="1189" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1046.56" y="1199.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (23,853,230 samples, 0.01%)</title><rect x="402.7" y="1173" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="405.69" y="1183.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (95,445,196 samples, 0.04%)</title><rect x="808.4" y="1173" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="811.40" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (45,729,746 samples, 0.02%)</title><rect x="902.2" y="1077" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="905.24" y="1087.5" ></text>
</g>
<g >
<title>[CCAnr] (24,940,772 samples, 0.01%)</title><rect x="735.8" y="1093" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="738.85" y="1103.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memcpy (20,485,322 samples, 0.01%)</title><rect x="145.3" y="1253" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="148.26" y="1263.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (212,019,460 samples, 0.09%)</title><rect x="517.0" y="1141" width="1.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="520.05" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (24,832,693 samples, 0.01%)</title><rect x="618.4" y="1189" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="621.44" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (69,902,177 samples, 0.03%)</title><rect x="588.7" y="1093" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="591.69" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (215,694,972 samples, 0.09%)</title><rect x="589.2" y="1125" width="1.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="592.16" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (118,364,688 samples, 0.05%)</title><rect x="701.0" y="1157" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="703.96" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (24,063,339 samples, 0.01%)</title><rect x="595.4" y="1125" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="598.43" y="1135.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (119,886,837 samples, 0.05%)</title><rect x="1165.1" y="1285" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1168.08" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (22,805,183 samples, 0.01%)</title><rect x="534.4" y="1157" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="537.43" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (70,503,872 samples, 0.03%)</title><rect x="700.6" y="1157" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="703.60" y="1167.5" ></text>
</g>
<g >
<title>__tls_get_addr (71,315,732 samples, 0.03%)</title><rect x="794.2" y="1189" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="797.15" y="1199.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (23,345,317 samples, 0.01%)</title><rect x="991.6" y="1141" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="994.61" y="1151.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (96,299,599 samples, 0.04%)</title><rect x="1005.4" y="1077" width="0.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1008.42" y="1087.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (332,526,712 samples, 0.14%)</title><rect x="422.5" y="1189" width="1.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="425.45" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (45,000,116 samples, 0.02%)</title><rect x="766.5" y="1141" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="769.53" y="1151.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (92,161,533 samples, 0.04%)</title><rect x="1185.7" y="1285" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1188.72" y="1295.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (329,444,079 samples, 0.14%)</title><rect x="16.1" y="1221" width="1.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="19.12" y="1231.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (164,566,084 samples, 0.07%)</title><rect x="770.3" y="1157" width="0.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="773.29" y="1167.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::end (48,809,682 samples, 0.02%)</title><rect x="1038.1" y="1173" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1041.07" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::pair&lt;int, int&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,134,724 samples, 0.01%)</title><rect x="275.4" y="1221" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="278.39" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (23,370,386 samples, 0.01%)</title><rect x="725.7" y="1093" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="728.72" y="1103.5" ></text>
</g>
<g >
<title>__access (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1253" width="0.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1192.85" y="1263.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (119,885,039 samples, 0.05%)</title><rect x="528.6" y="1109" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="531.62" y="1119.5" ></text>
</g>
<g >
<title>__lsan::MarkIndirectlyLeakedCb (22,666,422 samples, 0.01%)</title><rect x="187.9" y="1269" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="190.94" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (22,510,402 samples, 0.01%)</title><rect x="204.0" y="1253" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="206.99" y="1263.5" ></text>
</g>
<g >
<title>timeout (29,613,858 samples, 0.01%)</title><rect x="1189.9" y="1301" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.85" y="1311.5" ></text>
</g>
<g >
<title>scheduler_tick (23,161,563 samples, 0.01%)</title><rect x="999.4" y="965" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1002.42" y="975.5" ></text>
</g>
<g >
<title>user_path_at_empty (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1173" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1192.85" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_NodeBuilder&lt;std::__detail::_Identity&gt;::_S_build&lt;int const&amp;, int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (71,347,559 samples, 0.03%)</title><rect x="769.9" y="1157" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="772.93" y="1167.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (2,126,242,680 samples, 0.90%)</title><rect x="554.4" y="1221" width="10.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="557.40" y="1231.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (1,166,897,820 samples, 0.49%)</title><rect x="597.3" y="1125" width="5.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="600.32" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (48,008,081 samples, 0.02%)</title><rect x="874.5" y="1061" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="877.52" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_Node_iterator_base (242,055,092 samples, 0.10%)</title><rect x="437.2" y="1173" width="1.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="440.20" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (22,840,455 samples, 0.01%)</title><rect x="380.3" y="1221" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="383.35" y="1231.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_S_key (84,602,097 samples, 0.04%)</title><rect x="275.7" y="1173" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.69" y="1183.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (23,802,481 samples, 0.01%)</title><rect x="562.7" y="1109" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="565.74" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::begin (94,029,462 samples, 0.04%)</title><rect x="1098.4" y="1205" width="0.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1101.45" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_begin (22,513,706 samples, 0.01%)</title><rect x="1125.4" y="1173" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1128.37" y="1183.5" ></text>
</g>
<g >
<title>__tls_get_addr (210,792,649 samples, 0.09%)</title><rect x="1060.1" y="1173" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1063.07" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (24,002,095 samples, 0.01%)</title><rect x="1025.3" y="1013" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1028.32" y="1023.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (117,871,974 samples, 0.05%)</title><rect x="1036.2" y="1157" width="0.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1039.18" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (46,484,518 samples, 0.02%)</title><rect x="992.2" y="1141" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="995.19" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="741" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="751.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, int**, int**&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1109" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="406.41" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (22,510,402 samples, 0.01%)</title><rect x="204.0" y="1237" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="206.99" y="1247.5" ></text>
</g>
<g >
<title>do_exit (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1221" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.94" y="1231.5" ></text>
</g>
<g >
<title>alloc_pages_vma (96,245,367 samples, 0.04%)</title><rect x="189.0" y="1141" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="191.98" y="1151.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (22,578,860 samples, 0.01%)</title><rect x="902.7" y="1061" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="905.69" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (47,354,256 samples, 0.02%)</title><rect x="1052.6" y="1189" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1055.58" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="517" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::pair&lt;int, int, true&gt; (97,200,197 samples, 0.04%)</title><rect x="1124.3" y="1205" width="0.5" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1127.28" y="1215.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (23,197,834 samples, 0.01%)</title><rect x="739.7" y="1061" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="742.73" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,511,982,737 samples, 0.64%)</title><rect x="583.3" y="1157" width="7.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="586.27" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (72,621,245 samples, 0.03%)</title><rect x="860.9" y="1157" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="863.87" y="1167.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::find (23,063,445,769 samples, 9.76%)</title><rect x="439.2" y="1221" width="115.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="442.24" y="1231.5" >std::unordered..</text>
</g>
<g >
<title>__tls_get_addr (23,748,195 samples, 0.01%)</title><rect x="989.9" y="1141" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="992.86" y="1151.5" ></text>
</g>
<g >
<title>local_search (176,072,905,267 samples, 74.51%)</title><rect x="277.9" y="1253" width="879.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="280.92" y="1263.5" >local_search</text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::__small_size_threshold (71,337,062 samples, 0.03%)</title><rect x="992.5" y="1141" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="995.54" y="1151.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (280,583,381 samples, 0.12%)</title><rect x="615.0" y="1125" width="1.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="618.05" y="1135.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (141,598,104 samples, 0.06%)</title><rect x="204.1" y="1237" width="0.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="207.10" y="1247.5" ></text>
</g>
<g >
<title>build_skb (20,122,582 samples, 0.01%)</title><rect x="892.6" y="981" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="895.56" y="991.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,869,720 samples, 0.01%)</title><rect x="556.6" y="1173" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="559.63" y="1183.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long long&gt;::operator (325,027,105 samples, 0.14%)</title><rect x="1010.0" y="1061" width="1.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1013.00" y="1071.5" ></text>
</g>
<g >
<title>__tls_get_addr (119,865,967 samples, 0.05%)</title><rect x="713.6" y="1125" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="716.57" y="1135.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,809,542 samples, 0.01%)</title><rect x="688.0" y="1205" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="691.04" y="1215.5" ></text>
</g>
<g >
<title>do_group_exit (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1237" width="0.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1190.94" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (23,189,900 samples, 0.01%)</title><rect x="589.0" y="1125" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="592.04" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (223,116,464 samples, 0.09%)</title><rect x="461.8" y="1173" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="464.78" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false, false&gt;::_Node_iterator (290,225,142 samples, 0.12%)</title><rect x="437.0" y="1189" width="1.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="439.96" y="1199.5" ></text>
</g>
<g >
<title>clauseSatisfiedWithFlips (8,835,863,025 samples, 3.74%)</title><rect x="813.1" y="1173" width="44.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="816.09" y="1183.5" >clau..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (24,050,133 samples, 0.01%)</title><rect x="1035.0" y="1093" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1038.00" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (24,700,573 samples, 0.01%)</title><rect x="1003.8" y="1045" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1006.76" y="1055.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (310,008,691 samples, 0.13%)</title><rect x="458.9" y="1173" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="461.86" y="1183.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (163,317,250 samples, 0.07%)</title><rect x="1187.1" y="1269" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1190.13" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_Hash_node (259,453,967 samples, 0.11%)</title><rect x="756.6" y="1093" width="1.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="759.65" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::erase (23,711,888 samples, 0.01%)</title><rect x="1049.4" y="1189" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1052.39" y="1199.5" ></text>
</g>
<g >
<title>net_rx_action (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1205" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="275.07" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (93,382,455 samples, 0.04%)</title><rect x="1009.5" y="1061" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1012.53" y="1071.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator (20,697,609 samples, 0.01%)</title><rect x="276.8" y="1189" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="279.84" y="1199.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (23,293,358 samples, 0.01%)</title><rect x="608.0" y="1141" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="610.99" y="1151.5" ></text>
</g>
<g >
<title>clear_page_erms (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1061" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="194.61" y="1071.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (283,978,628 samples, 0.12%)</title><rect x="422.7" y="1173" width="1.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="425.70" y="1183.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator (44,751,195 samples, 0.02%)</title><rect x="277.5" y="1189" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="280.49" y="1199.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, int&gt; (20,697,609 samples, 0.01%)</title><rect x="276.8" y="1173" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="279.84" y="1183.5" ></text>
</g>
<g >
<title>[CCAnr] (23,925,382 samples, 0.01%)</title><rect x="692.7" y="1189" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="695.71" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_addr (23,698,968 samples, 0.01%)</title><rect x="564.7" y="1141" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="567.66" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (189,364,428 samples, 0.08%)</title><rect x="518.9" y="1141" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="521.93" y="1151.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (306,816,141 samples, 0.13%)</title><rect x="1147.7" y="1237" width="1.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1150.70" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::operator* (449,034,250 samples, 0.19%)</title><rect x="1119.3" y="1205" width="2.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1122.33" y="1215.5" ></text>
</g>
<g >
<title>do_anonymous_page (22,195,850 samples, 0.01%)</title><rect x="229.6" y="1173" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="232.60" y="1183.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_M_insert_node (20,134,724 samples, 0.01%)</title><rect x="275.4" y="1189" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="278.39" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (118,832,454 samples, 0.05%)</title><rect x="635.7" y="1189" width="0.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="638.70" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2,951,656,022 samples, 1.25%)</title><rect x="495.4" y="1141" width="14.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="498.43" y="1151.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,046,150 samples, 0.01%)</title><rect x="996.7" y="1109" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="999.70" y="1119.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (23,926,420 samples, 0.01%)</title><rect x="740.2" y="1029" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="743.20" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (23,766,597 samples, 0.01%)</title><rect x="279.0" y="1205" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="281.97" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (142,821,211 samples, 0.06%)</title><rect x="749.1" y="1141" width="0.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="752.08" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (215,961,285 samples, 0.09%)</title><rect x="1064.4" y="1157" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1067.43" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (22,782,022 samples, 0.01%)</title><rect x="736.2" y="1093" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="739.21" y="1103.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (23,733,781 samples, 0.01%)</title><rect x="78.7" y="1253" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="81.73" y="1263.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (71,766,599 samples, 0.03%)</title><rect x="864.0" y="1157" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="867.03" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="213" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="223.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (96,245,367 samples, 0.04%)</title><rect x="189.0" y="1125" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="191.98" y="1135.5" ></text>
</g>
<g >
<title>do_user_addr_fault (101,799,067 samples, 0.04%)</title><rect x="1162.8" y="1221" width="0.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1165.82" y="1231.5" ></text>
</g>
<g >
<title>smooth_clause_weights (684,468,060 samples, 0.29%)</title><rect x="1143.3" y="1205" width="3.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1146.35" y="1215.5" ></text>
</g>
<g >
<title>tick_sched_timer (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1173" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="148.14" y="1183.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,848,581 samples, 0.01%)</title><rect x="277.3" y="1189" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="280.26" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (146,307,579 samples, 0.06%)</title><rect x="537.5" y="1189" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="540.55" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (48,221,237 samples, 0.02%)</title><rect x="1048.8" y="1173" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1051.78" y="1183.5" ></text>
</g>
<g >
<title>clear_page_erms (96,245,367 samples, 0.04%)</title><rect x="189.0" y="1093" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="191.98" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_remove_bucket_begin (23,711,888 samples, 0.01%)</title><rect x="1049.4" y="1157" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1052.39" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_4 (134,073,892 samples, 0.06%)</title><rect x="271.5" y="1285" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="274.50" y="1295.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long long&gt;::operator (214,369,613 samples, 0.09%)</title><rect x="902.8" y="1077" width="1.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="905.80" y="1087.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,834,795 samples, 0.02%)</title><rect x="613.9" y="1109" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="616.85" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,390,884 samples, 0.01%)</title><rect x="999.5" y="1109" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1002.54" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_M_lower_bound (165,350,556 samples, 0.07%)</title><rect x="275.5" y="1189" width="0.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="278.49" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (46,704,703 samples, 0.02%)</title><rect x="884.9" y="1141" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="887.85" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (46,997,804 samples, 0.02%)</title><rect x="697.7" y="1173" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="700.74" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator* (24,960,875 samples, 0.01%)</title><rect x="279.3" y="1237" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="282.32" y="1247.5" ></text>
</g>
<g >
<title>get_page_from_freelist (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1077" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="194.61" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (117,734,914 samples, 0.05%)</title><rect x="862.4" y="1125" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="865.38" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (44,536,521 samples, 0.02%)</title><rect x="1009.1" y="1061" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1012.07" y="1071.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (23,392,892 samples, 0.01%)</title><rect x="279.6" y="1237" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="282.56" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::__detail::_Select1st, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (24,347,650 samples, 0.01%)</title><rect x="1075.9" y="1173" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1078.94" y="1183.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (70,783,504 samples, 0.03%)</title><rect x="551.4" y="1189" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="554.43" y="1199.5" ></text>
</g>
<g >
<title>perf_event_task_tick (24,355,773 samples, 0.01%)</title><rect x="735.1" y="981" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="738.13" y="991.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator (40,248,319 samples, 0.02%)</title><rect x="276.1" y="1173" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="279.12" y="1183.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (184,023,102 samples, 0.08%)</title><rect x="1167.4" y="1285" width="1.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1170.44" y="1295.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::size (420,608,435 samples, 0.18%)</title><rect x="675.4" y="1189" width="2.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="678.42" y="1199.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::empty (47,107,351 samples, 0.02%)</title><rect x="1090.8" y="1205" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1093.80" y="1215.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (260,888,097 samples, 0.11%)</title><rect x="237.6" y="1285" width="1.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="240.58" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (23,866,291 samples, 0.01%)</title><rect x="563.9" y="1141" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="566.94" y="1151.5" ></text>
</g>
<g >
<title>main (177,247,863,762 samples, 75.00%)</title><rect x="272.2" y="1269" width="885.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="275.17" y="1279.5" >main</text>
</g>
<g >
<title>sync_regs (20,135,932 samples, 0.01%)</title><rect x="1165.0" y="1269" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1167.98" y="1279.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (75,475,156 samples, 0.03%)</title><rect x="424.1" y="1221" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="427.11" y="1231.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (96,098,604 samples, 0.04%)</title><rect x="864.4" y="1157" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="867.39" y="1167.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::operator= (233,175,121 samples, 0.10%)</title><rect x="1123.1" y="1205" width="1.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1126.12" y="1215.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (70,018,277 samples, 0.03%)</title><rect x="1039.9" y="1205" width="0.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1042.91" y="1215.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,016,469 samples, 0.02%)</title><rect x="997.1" y="1109" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1000.06" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (21,591,338 samples, 0.01%)</title><rect x="277.4" y="1157" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="280.38" y="1167.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1109" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="751.96" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (46,952,391 samples, 0.02%)</title><rect x="723.8" y="1093" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="726.85" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique&lt;int const&amp;, int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (13,153,272,676 samples, 5.57%)</title><rect x="701.9" y="1157" width="65.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="704.90" y="1167.5" >std::_H..</text>
</g>
<g >
<title>__lsan::ResetTagsCb (88,879,921 samples, 0.04%)</title><rect x="188.1" y="1269" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="191.05" y="1279.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (37,331,961 samples, 0.02%)</title><rect x="381.2" y="1221" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="384.17" y="1231.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;std::__detail::_Hash_node&lt;int, false&gt;*, std::__detail::_Hash_node&lt;int, false&gt;, false&gt;::pointer_to (96,795,134 samples, 0.04%)</title><rect x="603.1" y="1125" width="0.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="606.15" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (25,025,824 samples, 0.01%)</title><rect x="1011.6" y="1093" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1014.62" y="1103.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (143,422,771 samples, 0.06%)</title><rect x="950.2" y="1157" width="0.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="953.18" y="1167.5" ></text>
</g>
<g >
<title>lapic_next_deadline (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1045" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="751.96" y="1055.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (71,531,314 samples, 0.03%)</title><rect x="688.9" y="1205" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="691.86" y="1215.5" ></text>
</g>
<g >
<title>do_page_fault (618,102,425 samples, 0.26%)</title><rect x="228.3" y="1253" width="3.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="231.28" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (157,522,949 samples, 0.07%)</title><rect x="673.9" y="1173" width="0.8" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="676.92" y="1183.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (24,872,777 samples, 0.01%)</title><rect x="229.7" y="1157" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="232.71" y="1167.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::find (69,874,245 samples, 0.03%)</title><rect x="1153.8" y="1237" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1156.82" y="1247.5" ></text>
</g>
<g >
<title>[CCAnr] (22,591,264 samples, 0.01%)</title><rect x="1129.4" y="1189" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1132.44" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (1,391,901,656 samples, 0.59%)</title><rect x="259.2" y="1285" width="7.0" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="262.22" y="1295.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (24,773,302 samples, 0.01%)</title><rect x="14.0" y="1173" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="16.95" y="1183.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (47,429,364 samples, 0.02%)</title><rect x="905.8" y="1125" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="908.77" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (68,404,927 samples, 0.03%)</title><rect x="881.0" y="1077" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="884.03" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (163,381,486 samples, 0.07%)</title><rect x="1146.9" y="1237" width="0.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1149.88" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;long long&gt;, true&gt;::_M_cget (22,257,742 samples, 0.01%)</title><rect x="902.4" y="1061" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="905.36" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::DTLS_on_tls_get_addr (12,573,713,207 samples, 5.32%)</title><rect x="82.5" y="1253" width="62.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="85.47" y="1263.5" >__sani..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (23,901,673 samples, 0.01%)</title><rect x="611.5" y="1141" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="614.49" y="1151.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (236,021,878 samples, 0.10%)</title><rect x="907.6" y="1173" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="910.63" y="1183.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1141" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="275.07" y="1151.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (22,940,900 samples, 0.01%)</title><rect x="190.5" y="1109" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="193.53" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (46,658,013 samples, 0.02%)</title><rect x="769.7" y="1157" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="772.70" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::__small_size_threshold (91,747,221 samples, 0.04%)</title><rect x="621.3" y="1205" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="624.28" y="1215.5" ></text>
</g>
<g >
<title>__asan::asan_delete (70,566,849 samples, 0.03%)</title><rect x="599.3" y="1109" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="602.33" y="1119.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (23,983,136 samples, 0.01%)</title><rect x="1038.7" y="1173" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1041.66" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,469,603,791 samples, 0.62%)</title><rect x="735.2" y="1109" width="7.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="738.25" y="1119.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (254,723,219 samples, 0.11%)</title><rect x="201.9" y="1253" width="1.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="204.90" y="1263.5" ></text>
</g>
<g >
<title>page_fault (24,862,003 samples, 0.01%)</title><rect x="52.3" y="1237" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="55.31" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="495.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (95,210,043 samples, 0.04%)</title><rect x="889.7" y="1125" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="892.70" y="1135.5" ></text>
</g>
<g >
<title>error_entry (103,032,939 samples, 0.04%)</title><rect x="1160.8" y="1269" width="0.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1163.85" y="1279.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (72,096,271 samples, 0.03%)</title><rect x="196.9" y="1077" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="199.94" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (304,132,106 samples, 0.13%)</title><rect x="1073.0" y="1157" width="1.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1075.99" y="1167.5" ></text>
</g>
<g >
<title>update_clause_weights (3,306,124,521 samples, 1.40%)</title><rect x="1130.3" y="1221" width="16.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1133.26" y="1231.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (20,121,783 samples, 0.01%)</title><rect x="671.9" y="853" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="674.92" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (24,062,925 samples, 0.01%)</title><rect x="757.9" y="1093" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="760.94" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="405" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="415.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (22,940,900 samples, 0.01%)</title><rect x="190.5" y="1093" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="193.53" y="1103.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1221" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1150.58" y="1231.5" ></text>
</g>
<g >
<title>do_anonymous_page (41,406,369 samples, 0.02%)</title><rect x="1163.1" y="1173" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1166.12" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (69,524,364 samples, 0.03%)</title><rect x="1035.8" y="1093" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1038.83" y="1103.5" ></text>
</g>
<g >
<title>__lsan::MarkIndirectlyLeakedCb (45,315,367 samples, 0.02%)</title><rect x="82.2" y="1253" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="85.25" y="1263.5" ></text>
</g>
<g >
<title>__tls_get_addr (22,127,381 samples, 0.01%)</title><rect x="1024.0" y="1077" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1027.03" y="1087.5" ></text>
</g>
<g >
<title>__tls_get_addr (22,204,717 samples, 0.01%)</title><rect x="276.7" y="1189" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="279.73" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (115,633,063 samples, 0.05%)</title><rect x="1030.2" y="1045" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1033.16" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (71,543,832 samples, 0.03%)</title><rect x="1076.5" y="1173" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1079.54" y="1183.5" ></text>
</g>
<g >
<title>__lru_cache_add (22,940,900 samples, 0.01%)</title><rect x="190.5" y="1125" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="193.53" y="1135.5" ></text>
</g>
<g >
<title>task_tick_fair (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1061" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1127.05" y="1071.5" ></text>
</g>
<g >
<title>[CCAnr] (24,817,157 samples, 0.01%)</title><rect x="948.3" y="1157" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="951.31" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (46,338,603 samples, 0.02%)</title><rect x="809.7" y="1173" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="812.68" y="1183.5" ></text>
</g>
<g >
<title>get_page_from_freelist (119,158,276 samples, 0.05%)</title><rect x="230.2" y="1109" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="233.19" y="1119.5" ></text>
</g>
<g >
<title>release_pages (59,593,520 samples, 0.03%)</title><rect x="1188.2" y="1077" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1191.25" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (47,287,993 samples, 0.02%)</title><rect x="883.2" y="1125" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="886.19" y="1135.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (23,215,829 samples, 0.01%)</title><rect x="197.4" y="1077" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="200.42" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (23,624,771 samples, 0.01%)</title><rect x="690.2" y="1205" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="693.16" y="1215.5" ></text>
</g>
<g >
<title>[CCAnr] (24,492,245 samples, 0.01%)</title><rect x="576.4" y="1157" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="579.40" y="1167.5" ></text>
</g>
<g >
<title>napi_complete_done (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1013" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="674.92" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (23,048,361 samples, 0.01%)</title><rect x="1012.7" y="1109" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1015.67" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23,641,724 samples, 0.01%)</title><rect x="559.1" y="1157" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="562.09" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (191,312,793 samples, 0.08%)</title><rect x="469.5" y="1189" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="472.50" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (139,073,679 samples, 0.06%)</title><rect x="906.9" y="1173" width="0.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="909.94" y="1183.5" ></text>
</g>
<g >
<title>find_vma (24,693,978 samples, 0.01%)</title><rect x="228.9" y="1205" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="231.89" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1061" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_M_next (264,401,270 samples, 0.11%)</title><rect x="511.8" y="1157" width="1.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="514.81" y="1167.5" ></text>
</g>
<g >
<title>operator delete (24,884,718 samples, 0.01%)</title><rect x="1127.6" y="1125" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1130.63" y="1135.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (21,744,165 samples, 0.01%)</title><rect x="1004.2" y="1061" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1007.24" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (69,962,628 samples, 0.03%)</title><rect x="1012.4" y="1125" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1015.44" y="1135.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::_M_push_back_aux&lt;int const&amp;&gt; (451,045,068 samples, 0.19%)</title><rect x="401.8" y="1205" width="2.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="404.75" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (71,638,084 samples, 0.03%)</title><rect x="739.4" y="1061" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="742.37" y="1071.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::operator (20,111,621 samples, 0.01%)</title><rect x="276.0" y="1157" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="279.02" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (47,646,156 samples, 0.02%)</title><rect x="528.0" y="1125" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="531.04" y="1135.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::erase (9,205,343,951 samples, 3.90%)</title><rect x="572.8" y="1221" width="46.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="575.84" y="1231.5" >std:..</text>
</g>
<g >
<title>__asan::GetFakeStackFast (50,344,808 samples, 0.02%)</title><rect x="1089.1" y="1221" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1092.12" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4,195,712,490 samples, 1.78%)</title><rect x="992.9" y="1141" width="20.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="995.90" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (996,963,001 samples, 0.42%)</title><rect x="559.2" y="1157" width="5.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="562.20" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="917" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="927.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (114,436,356 samples, 0.05%)</title><rect x="597.9" y="1109" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="600.92" y="1119.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (93,876,594 samples, 0.04%)</title><rect x="1030.3" y="1029" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1033.27" y="1039.5" ></text>
</g>
<g >
<title>__interceptor_clock_gettime (72,953,472 samples, 0.03%)</title><rect x="279.7" y="1237" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="282.68" y="1247.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;::duration&lt;double, void&gt; (23,764,332 samples, 0.01%)</title><rect x="1094.8" y="1189" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1097.76" y="1199.5" ></text>
</g>
<g >
<title>[CCAnr] (95,717,319 samples, 0.04%)</title><rect x="515.8" y="1141" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="518.75" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,394,807 samples, 0.01%)</title><rect x="1099.0" y="1173" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1102.04" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (22,428,730 samples, 0.01%)</title><rect x="1016.1" y="1141" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1019.09" y="1151.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,001,624 samples, 0.01%)</title><rect x="701.5" y="1141" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="704.55" y="1151.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (24,670,893 samples, 0.01%)</title><rect x="426.3" y="1205" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="429.27" y="1215.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1221" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1188.23" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (117,121,148 samples, 0.05%)</title><rect x="906.1" y="1125" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="909.12" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (23,939,038 samples, 0.01%)</title><rect x="1003.6" y="1045" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1006.64" y="1055.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (140,162,789 samples, 0.06%)</title><rect x="1097.6" y="1221" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1100.63" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (47,967,440 samples, 0.02%)</title><rect x="1127.3" y="1141" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1130.27" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (47,109,863 samples, 0.02%)</title><rect x="618.2" y="1173" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="621.21" y="1183.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (166,467,579 samples, 0.07%)</title><rect x="1155.8" y="1237" width="0.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1158.81" y="1247.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (73,358,700 samples, 0.03%)</title><rect x="228.5" y="1205" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="231.52" y="1215.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (162,855,974 samples, 0.07%)</title><rect x="404.0" y="1205" width="0.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="407.01" y="1215.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (24,397,494 samples, 0.01%)</title><rect x="899.1" y="1093" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="902.07" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (118,130,000 samples, 0.05%)</title><rect x="610.2" y="1141" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="613.19" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (23,017,299 samples, 0.01%)</title><rect x="1025.2" y="1029" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1028.20" y="1039.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__assign_one&lt;int*, int*&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1077" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="406.41" y="1087.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (22,631,001 samples, 0.01%)</title><rect x="203.8" y="1237" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="206.76" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="117" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (24,107,117 samples, 0.01%)</title><rect x="751.3" y="1125" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="754.33" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (23,161,563 samples, 0.01%)</title><rect x="999.4" y="1045" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1002.42" y="1055.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;int, int&gt;, int, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::operator[] (185,485,280 samples, 0.08%)</title><rect x="275.4" y="1237" width="0.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="278.39" y="1247.5" ></text>
</g>
<g >
<title>handle_mm_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1205" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1168.56" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (22,455,808 samples, 0.01%)</title><rect x="608.3" y="1125" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="611.34" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (24,139,618 samples, 0.01%)</title><rect x="904.0" y="1093" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="907.00" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (119,063,665 samples, 0.05%)</title><rect x="1018.5" y="1109" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1021.46" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (32,643,642,786 samples, 13.81%)</title><rect x="10.2" y="1269" width="163.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.19" y="1279.5" >[unknown]</text>
</g>
<g >
<title>ip_local_deliver_finish (20,121,783 samples, 0.01%)</title><rect x="671.9" y="885" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="674.92" y="895.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (23,992,160 samples, 0.01%)</title><rect x="469.3" y="1125" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="472.25" y="1135.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (23,001,624 samples, 0.01%)</title><rect x="701.5" y="1125" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="704.55" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (23,711,888 samples, 0.01%)</title><rect x="1049.4" y="1173" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1052.39" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (22,727,088 samples, 0.01%)</title><rect x="203.5" y="1253" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="206.53" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (215,041,075 samples, 0.09%)</title><rect x="740.8" y="1077" width="1.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="743.79" y="1087.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,077,681 samples, 0.01%)</title><rect x="696.9" y="1173" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="699.92" y="1183.5" ></text>
</g>
<g >
<title>page_fault (169,866,235 samples, 0.07%)</title><rect x="188.7" y="1253" width="0.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="191.73" y="1263.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,200,914 samples, 0.02%)</title><rect x="280.3" y="1237" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="283.28" y="1247.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (141,491,368 samples, 0.06%)</title><rect x="380.5" y="1221" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="383.46" y="1231.5" ></text>
</g>
<g >
<title>tick_program_event (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1077" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="751.96" y="1087.5" ></text>
</g>
<g >
<title>[CCAnr] (140,556,028 samples, 0.06%)</title><rect x="457.7" y="1173" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="460.69" y="1183.5" ></text>
</g>
<g >
<title>std::vector&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (236,099,699 samples, 0.10%)</title><rect x="1154.6" y="1237" width="1.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1157.63" y="1247.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::_M_addr (23,264,983 samples, 0.01%)</title><rect x="274.9" y="1141" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="277.87" y="1151.5" ></text>
</g>
<g >
<title>do_anonymous_page (119,301,006 samples, 0.05%)</title><rect x="196.9" y="1109" width="0.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="199.94" y="1119.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (374,935,777 samples, 0.16%)</title><rect x="1093.0" y="1205" width="1.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1096.01" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="261" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (49,078,912 samples, 0.02%)</title><rect x="190.3" y="1109" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="193.29" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (24,721,869 samples, 0.01%)</title><rect x="1119.2" y="1205" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1122.20" y="1215.5" ></text>
</g>
<g >
<title>__do_page_fault (167,537,704 samples, 0.07%)</title><rect x="196.7" y="1173" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="199.69" y="1183.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::_M_reserve_map_at_back (142,838,744 samples, 0.06%)</title><rect x="402.9" y="1189" width="0.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="405.93" y="1199.5" ></text>
</g>
<g >
<title>std::operator- (1,343,070,652 samples, 0.57%)</title><rect x="926.9" y="1173" width="6.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="929.94" y="1183.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (23,528,058 samples, 0.01%)</title><rect x="559.0" y="1109" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="561.97" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (299,160,827 samples, 0.13%)</title><rect x="873.7" y="1109" width="1.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="876.74" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,605,856,182 samples, 1.10%)</title><rect x="870.1" y="1125" width="13.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="873.07" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4,171,266,181 samples, 1.77%)</title><rect x="886.1" y="1157" width="20.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="889.11" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="133" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (93,763,931 samples, 0.04%)</title><rect x="762.3" y="1093" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="765.28" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (145,105,285 samples, 0.06%)</title><rect x="880.1" y="1077" width="0.7" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="883.07" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (139,760,377 samples, 0.06%)</title><rect x="666.3" y="1109" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="669.28" y="1119.5" ></text>
</g>
<g >
<title>update_process_times (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1013" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="872.25" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (24,774,989 samples, 0.01%)</title><rect x="510.9" y="1141" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="513.86" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1013" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (1,879,420,079 samples, 0.80%)</title><rect x="753.5" y="1109" width="9.4" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="756.47" y="1119.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (22,631,187 samples, 0.01%)</title><rect x="762.7" y="1093" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="765.75" y="1103.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (142,211,213 samples, 0.06%)</title><rect x="1171.1" y="1285" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1174.08" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (807,606,042 samples, 0.34%)</title><rect x="13.7" y="1237" width="4.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1247.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (305,708,217 samples, 0.13%)</title><rect x="1057.5" y="1173" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1060.50" y="1183.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (24,817,097 samples, 0.01%)</title><rect x="1095.7" y="1205" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1098.72" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="933" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (46,576,505 samples, 0.02%)</title><rect x="758.2" y="1077" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="761.18" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (70,698,902 samples, 0.03%)</title><rect x="764.1" y="1125" width="0.3" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="767.05" y="1135.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,860,325 samples, 0.01%)</title><rect x="576.5" y="1157" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="579.52" y="1167.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, int&gt; (40,245,237 samples, 0.02%)</title><rect x="275.0" y="1173" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="277.99" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (24,082,571 samples, 0.01%)</title><rect x="869.4" y="1141" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="872.37" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (70,763,877 samples, 0.03%)</title><rect x="991.0" y="1109" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="993.96" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (23,736,188 samples, 0.01%)</title><rect x="673.8" y="1173" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="676.80" y="1183.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (45,442,410 samples, 0.02%)</title><rect x="279.1" y="1221" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="282.09" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (23,813,424 samples, 0.01%)</title><rect x="275.8" y="1157" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="278.80" y="1167.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (23,325,598 samples, 0.01%)</title><rect x="534.3" y="1141" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="537.31" y="1151.5" ></text>
</g>
<g >
<title>do_wp_page (310,144,688 samples, 0.13%)</title><rect x="229.7" y="1173" width="1.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="232.71" y="1183.5" ></text>
</g>
<g >
<title>[CCAnr] (42,820,406 samples, 0.02%)</title><rect x="1056.5" y="1173" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1059.48" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (188,116,872 samples, 0.08%)</title><rect x="949.0" y="1157" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="952.01" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (22,743,838 samples, 0.01%)</title><rect x="717.1" y="1125" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="720.13" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (24,063,339 samples, 0.01%)</title><rect x="595.4" y="1109" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="598.43" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (266,592,419 samples, 0.11%)</title><rect x="990.0" y="1141" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="992.98" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (93,456,682 samples, 0.04%)</title><rect x="1026.9" y="1077" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1029.85" y="1087.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long long&gt;::operator (188,422,699 samples, 0.08%)</title><rect x="1031.9" y="1061" width="1.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1034.92" y="1071.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (117,491,402 samples, 0.05%)</title><rect x="494.1" y="1141" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="497.13" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,354,685 samples, 0.01%)</title><rect x="715.8" y="1109" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="718.84" y="1119.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (189,593,846 samples, 0.08%)</title><rect x="427.9" y="1205" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="430.94" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (23,941,413 samples, 0.01%)</title><rect x="742.1" y="1093" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="745.11" y="1103.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1125" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="275.07" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (40,973,077,976 samples, 17.34%)</title><rect x="10.1" y="1285" width="204.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.07" y="1295.5" >[unknown]</text>
</g>
<g >
<title>std::max&lt;int&gt; (24,754,970 samples, 0.01%)</title><rect x="1038.0" y="1173" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1040.95" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1285" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.85" y="1295.5" ></text>
</g>
<g >
<title>do_page_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1253" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1168.56" y="1263.5" ></text>
</g>
<g >
<title>__tls_get_addr (190,426,735 samples, 0.08%)</title><rect x="711.0" y="1141" width="0.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="713.96" y="1151.5" ></text>
</g>
<g >
<title>tick_sched_handle (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1109" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1127.05" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::IsRssLimitExceeded (20,121,106 samples, 0.01%)</title><rect x="210.4" y="1237" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="213.38" y="1247.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (48,117,327 samples, 0.02%)</title><rect x="763.8" y="1109" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="766.81" y="1119.5" ></text>
</g>
<g >
<title>std::operator- (24,744,110 samples, 0.01%)</title><rect x="933.6" y="1189" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="936.65" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (94,143,816 samples, 0.04%)</title><rect x="688.4" y="1205" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="691.39" y="1215.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (24,159,862 samples, 0.01%)</title><rect x="189.5" y="1125" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="192.46" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,949,295 samples, 0.01%)</title><rect x="1125.3" y="1157" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1128.25" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (71,766,953 samples, 0.03%)</title><rect x="371.6" y="1221" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="374.55" y="1231.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (709,597,216 samples, 0.30%)</title><rect x="10.2" y="1253" width="3.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.19" y="1263.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator+= (68,919,239 samples, 0.03%)</title><rect x="921.1" y="1157" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="924.11" y="1167.5" ></text>
</g>
<g >
<title>tcp_rcv_established (20,121,783 samples, 0.01%)</title><rect x="671.9" y="821" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="674.92" y="831.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,020,026 samples, 0.02%)</title><rect x="996.8" y="1109" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="999.82" y="1119.5" ></text>
</g>
<g >
<title>find_vma (24,095,707 samples, 0.01%)</title><rect x="190.2" y="1189" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="193.17" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_begin (47,679,457 samples, 0.02%)</title><rect x="1065.5" y="1157" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1068.51" y="1167.5" ></text>
</g>
<g >
<title>do_syscall_64 (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1269" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.94" y="1279.5" ></text>
</g>
<g >
<title>do_page_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1237" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="194.61" y="1247.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (167,167,706 samples, 0.07%)</title><rect x="693.0" y="1189" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="695.95" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="693" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="703.5" ></text>
</g>
<g >
<title>[CCAnr] (24,131,561 samples, 0.01%)</title><rect x="1002.6" y="1077" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1005.59" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (166,906,740 samples, 0.07%)</title><rect x="528.4" y="1125" width="0.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="531.39" y="1135.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::end (1,235,162,157 samples, 0.52%)</title><rect x="1043.0" y="1205" width="6.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1045.98" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (23,588,251 samples, 0.01%)</title><rect x="1013.5" y="1125" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1016.49" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (46,857,562 samples, 0.02%)</title><rect x="1009.3" y="1061" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1012.30" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (47,834,795 samples, 0.02%)</title><rect x="613.9" y="1125" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="616.85" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (23,743,717 samples, 0.01%)</title><rect x="1009.0" y="1029" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1011.95" y="1039.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (72,371,476 samples, 0.03%)</title><rect x="747.0" y="1141" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="749.95" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (22,670,930 samples, 0.01%)</title><rect x="520.2" y="1141" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="523.23" y="1151.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1269" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1192.85" y="1279.5" ></text>
</g>
<g >
<title>__hrtimer_next_event_base (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1141" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1150.58" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (22,727,088 samples, 0.01%)</title><rect x="203.5" y="1269" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="206.53" y="1279.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,231,639 samples, 0.01%)</title><rect x="807.9" y="1173" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="810.95" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (21,863,088 samples, 0.01%)</title><rect x="1098.8" y="1189" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1101.81" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (189,042,391 samples, 0.08%)</title><rect x="1073.6" y="1141" width="0.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1076.57" y="1151.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (24,868,799 samples, 0.01%)</title><rect x="231.1" y="1125" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="234.13" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (94,268,462 samples, 0.04%)</title><rect x="1074.5" y="1157" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1077.51" y="1167.5" ></text>
</g>
<g >
<title>native_write_msr (24,355,773 samples, 0.01%)</title><rect x="735.1" y="917" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="738.13" y="927.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="661" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,978,570,814 samples, 1.68%)</title><rect x="1016.3" y="1141" width="19.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1019.31" y="1151.5" ></text>
</g>
<g >
<title>tick_sched_timer (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1045" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="872.25" y="1055.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (47,151,513 samples, 0.02%)</title><rect x="372.0" y="1221" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="375.03" y="1231.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (144,323,746 samples, 0.06%)</title><rect x="629.8" y="1173" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="632.78" y="1183.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (48,902,406 samples, 0.02%)</title><rect x="203.2" y="1221" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="206.17" y="1231.5" ></text>
</g>
<g >
<title>[CCAnr] (24,798,348 samples, 0.01%)</title><rect x="1093.4" y="1189" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1096.36" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (23,122,595 samples, 0.01%)</title><rect x="1006.3" y="1077" width="0.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1009.26" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (24,732,489 samples, 0.01%)</title><rect x="897.3" y="1093" width="0.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="900.32" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (45,835,743 samples, 0.02%)</title><rect x="937.5" y="1173" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="940.48" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (1,617,070,718 samples, 0.68%)</title><rect x="595.6" y="1141" width="8.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="598.55" y="1151.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1189" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="693.04" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (24,792,657 samples, 0.01%)</title><rect x="469.4" y="1173" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="472.37" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator++ (24,786,206 samples, 0.01%)</title><rect x="279.4" y="1237" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="282.44" y="1247.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::lower_bound (165,350,556 samples, 0.07%)</title><rect x="275.5" y="1205" width="0.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="278.49" y="1215.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1157" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="860.08" y="1167.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (23,967,224 samples, 0.01%)</title><rect x="1153.2" y="1237" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1156.23" y="1247.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_Deque_iterator (378,587,156 samples, 0.16%)</title><rect x="921.7" y="1141" width="1.9" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="924.69" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (1,638,592,283 samples, 0.69%)</title><rect x="1066.8" y="1173" width="8.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1069.80" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_ptr (69,319,216 samples, 0.03%)</title><rect x="562.3" y="1093" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="565.28" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (138,665,509 samples, 0.06%)</title><rect x="906.0" y="1141" width="0.7" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="909.01" y="1151.5" ></text>
</g>
<g >
<title>std::forward&lt;int&amp;&gt; (91,987,220 samples, 0.04%)</title><rect x="1042.5" y="1189" width="0.5" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1045.52" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (23,587,367 samples, 0.01%)</title><rect x="1125.5" y="1157" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1128.48" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (23,645,590 samples, 0.01%)</title><rect x="1004.3" y="1093" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1007.35" y="1103.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (24,322,135 samples, 0.01%)</title><rect x="667.3" y="1109" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="670.33" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_AllocNode (69,481,009 samples, 0.03%)</title><rect x="689.8" y="1205" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="692.81" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (93,653,690 samples, 0.04%)</title><rect x="896.4" y="1061" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="899.37" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node_tr&lt;int&gt; (1,722,189,472 samples, 0.73%)</title><rect x="717.2" y="1125" width="8.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="720.24" y="1135.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.0 (24,355,773 samples, 0.01%)</title><rect x="735.1" y="965" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="738.13" y="975.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="549" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="559.5" ></text>
</g>
<g >
<title>__kfree_skb (20,121,783 samples, 0.01%)</title><rect x="671.9" y="773" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="674.92" y="783.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (94,123,098 samples, 0.04%)</title><rect x="439.9" y="1205" width="0.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="442.95" y="1215.5" ></text>
</g>
<g >
<title>native_iret (22,075,965 samples, 0.01%)</title><rect x="1161.4" y="1269" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1164.36" y="1279.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,791,014 samples, 0.01%)</title><rect x="909.0" y="1173" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="912.04" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (1,807,948,321 samples, 0.77%)</title><rect x="429.6" y="1205" width="9.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="432.61" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (70,911,974 samples, 0.03%)</title><rect x="1033.3" y="1077" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1036.34" y="1087.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,585,239 samples, 0.01%)</title><rect x="859.9" y="1157" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="862.92" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (23,643,074 samples, 0.01%)</title><rect x="618.1" y="1173" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="621.09" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (47,930,867 samples, 0.02%)</title><rect x="751.1" y="1109" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="754.09" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (653,472,423 samples, 0.28%)</title><rect x="682.2" y="1189" width="3.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="685.17" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_key_equals (23,061,065 samples, 0.01%)</title><rect x="616.8" y="1157" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="619.81" y="1167.5" ></text>
</g>
<g >
<title>computePairDeltaOverlap (19,653,449,661 samples, 8.32%)</title><rect x="939.8" y="1173" width="98.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="942.82" y="1183.5" >computePair..</text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,070,534 samples, 0.01%)</title><rect x="1043.4" y="1189" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1046.45" y="1199.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (191,495,469 samples, 0.08%)</title><rect x="630.5" y="1173" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="633.50" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (117,465,773 samples, 0.05%)</title><rect x="511.2" y="1157" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="514.22" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (266,059,889 samples, 0.11%)</title><rect x="888.0" y="1125" width="1.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="891.03" y="1135.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (23,395,336 samples, 0.01%)</title><rect x="185.8" y="1269" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="188.80" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (48,382,330 samples, 0.02%)</title><rect x="883.8" y="1141" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="886.79" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (24,700,573 samples, 0.01%)</title><rect x="1003.8" y="1029" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1006.76" y="1039.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (17,089,610,883 samples, 7.23%)</title><rect x="688.0" y="1221" width="85.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="691.04" y="1231.5" >std::unord..</text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::erase (72,553,190 samples, 0.03%)</title><rect x="1049.1" y="1205" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1052.14" y="1215.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1205" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1150.58" y="1215.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue (20,121,783 samples, 0.01%)</title><rect x="671.9" y="789" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="674.92" y="799.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (635,933,200 samples, 0.27%)</title><rect x="79.0" y="1253" width="3.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="81.96" y="1263.5" ></text>
</g>
<g >
<title>scheduler_tick (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1077" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1127.05" y="1087.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (72,235,714 samples, 0.03%)</title><rect x="588.1" y="1109" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="591.09" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (22,690,806 samples, 0.01%)</title><rect x="722.4" y="1093" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="725.44" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (73,812,030 samples, 0.03%)</title><rect x="681.4" y="1173" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="684.44" y="1183.5" ></text>
</g>
<g >
<title>_raw_spin_lock (24,646,679 samples, 0.01%)</title><rect x="188.9" y="1157" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="191.86" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (119,832,966 samples, 0.05%)</title><rect x="1108.0" y="1205" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1111.00" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11,894,084,994 samples, 5.03%)</title><rect x="475.3" y="1173" width="59.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="478.27" y="1183.5" >std::_..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (24,934,881 samples, 0.01%)</title><rect x="403.9" y="1157" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="406.88" y="1167.5" ></text>
</g>
<g >
<title>__build_skb (20,122,582 samples, 0.01%)</title><rect x="892.6" y="965" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="895.56" y="975.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (21,226,153,040 samples, 8.98%)</title><rect x="445.8" y="1205" width="106.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="448.80" y="1215.5" >std::_Hashta..</text>
</g>
<g >
<title>std::__detail::_Identity::operator (49,020,656 samples, 0.02%)</title><rect x="742.3" y="1093" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="745.34" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (69,424,784 samples, 0.03%)</title><rect x="13.7" y="1189" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (24,932,012 samples, 0.01%)</title><rect x="747.2" y="1125" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="750.19" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (70,572,067 samples, 0.03%)</title><rect x="635.2" y="1157" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="638.23" y="1167.5" ></text>
</g>
<g >
<title>__handle_mm_fault (119,301,006 samples, 0.05%)</title><rect x="196.9" y="1125" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="199.94" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (115,839,929 samples, 0.05%)</title><rect x="892.1" y="1109" width="0.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="895.08" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (305,768,020 samples, 0.13%)</title><rect x="1002.8" y="1077" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1005.82" y="1087.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (47,771,560 samples, 0.02%)</title><rect x="603.4" y="1093" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="606.39" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (782,483,371 samples, 0.33%)</title><rect x="779.5" y="1221" width="3.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="782.50" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::__small_size_threshold (47,423,072 samples, 0.02%)</title><rect x="674.7" y="1189" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="677.71" y="1199.5" ></text>
</g>
<g >
<title>__tls_get_addr (118,010,853 samples, 0.05%)</title><rect x="631.5" y="1173" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="634.46" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (69,726,823 samples, 0.03%)</title><rect x="572.3" y="1189" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="575.28" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (140,870,321 samples, 0.06%)</title><rect x="660.1" y="1141" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="663.12" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (23,017,299 samples, 0.01%)</title><rect x="1025.2" y="1045" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1028.20" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (71,296,161 samples, 0.03%)</title><rect x="874.8" y="1077" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="877.76" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;std::hash&lt;int&gt; &gt;::__small_size_threshold (71,538,362 samples, 0.03%)</title><rect x="751.9" y="1141" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="754.92" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,484,481 samples, 0.02%)</title><rect x="1019.9" y="1109" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1022.90" y="1119.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (24,934,881 samples, 0.01%)</title><rect x="403.9" y="1141" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="406.88" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (95,382,484 samples, 0.04%)</title><rect x="584.0" y="1141" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="586.98" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (4,328,161,822 samples, 1.83%)</title><rect x="1014.6" y="1157" width="21.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1017.57" y="1167.5" >s..</text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="773" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="783.5" ></text>
</g>
<g >
<title>[unknown] (812,161,801 samples, 0.34%)</title><rect x="210.5" y="1253" width="4.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="213.48" y="1263.5" ></text>
</g>
<g >
<title>do_IRQ (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1125" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1076.47" y="1135.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,457,728 samples, 0.02%)</title><rect x="1089.6" y="1221" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1092.61" y="1231.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (24,851,401 samples, 0.01%)</title><rect x="190.6" y="1141" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="193.65" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_M_incr (119,413,198 samples, 0.05%)</title><rect x="1121.7" y="1189" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1124.68" y="1199.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::size (72,153,847 samples, 0.03%)</title><rect x="403.6" y="1189" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="406.64" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code_tr&lt;int&gt; (144,038,896 samples, 0.06%)</title><rect x="769.0" y="1157" width="0.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="771.98" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (118,217,790 samples, 0.05%)</title><rect x="1122.4" y="1205" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1125.41" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (47,614,563 samples, 0.02%)</title><rect x="723.4" y="1077" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="726.38" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (94,265,870 samples, 0.04%)</title><rect x="740.3" y="1077" width="0.5" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="743.32" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (69,938,570 samples, 0.03%)</title><rect x="510.5" y="1141" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="513.51" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::end (2,690,797,518 samples, 1.14%)</title><rect x="425.8" y="1221" width="13.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="428.80" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (45,822,027 samples, 0.02%)</title><rect x="857.3" y="1173" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="860.31" y="1183.5" ></text>
</g>
<g >
<title>[CCAnr] (47,154,336 samples, 0.02%)</title><rect x="859.7" y="1157" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="862.68" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (140,876,486 samples, 0.06%)</title><rect x="862.3" y="1141" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="865.27" y="1151.5" ></text>
</g>
<g >
<title>[CCAnr] (23,207,924 samples, 0.01%)</title><rect x="1061.2" y="1157" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1064.24" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,310,771 samples, 0.02%)</title><rect x="567.3" y="1205" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="570.27" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="565" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (24,002,095 samples, 0.01%)</title><rect x="1025.3" y="1029" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1028.32" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (24,014,042 samples, 0.01%)</title><rect x="656.6" y="1125" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="659.57" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (115,292,883 samples, 0.05%)</title><rect x="619.6" y="1205" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="622.63" y="1215.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::find (248,610,115 samples, 0.11%)</title><rect x="274.2" y="1221" width="1.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="277.15" y="1231.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1157" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1127.05" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,994,357 samples, 0.01%)</title><rect x="557.8" y="1157" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="560.82" y="1167.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right (20,505,040 samples, 0.01%)</title><rect x="276.9" y="1205" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="279.94" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (142,085,561 samples, 0.06%)</title><rect x="685.4" y="1189" width="0.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="688.43" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::operator++ (142,185,560 samples, 0.06%)</title><rect x="1121.6" y="1205" width="0.7" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1124.57" y="1215.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (117,644,154 samples, 0.05%)</title><rect x="697.1" y="1173" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="700.15" y="1183.5" ></text>
</g>
<g >
<title>do_IRQ (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1093" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="674.92" y="1103.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1077" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1188.35" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (2,512,953,172 samples, 1.06%)</title><rect x="520.3" y="1141" width="12.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="523.35" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="645" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="655.5" ></text>
</g>
<g >
<title>[unknown] (23,766,597 samples, 0.01%)</title><rect x="279.0" y="1221" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="281.97" y="1231.5" ></text>
</g>
<g >
<title>getBestRevFirstVarAndScore (143,239,182 samples, 0.06%)</title><rect x="1090.3" y="1221" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1093.32" y="1231.5" ></text>
</g>
<g >
<title>__tls_get_addr (93,573,895 samples, 0.04%)</title><rect x="953.3" y="1157" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="956.30" y="1167.5" ></text>
</g>
<g >
<title>__tls_get_addr (143,949,003 samples, 0.06%)</title><rect x="620.3" y="1205" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="623.32" y="1215.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (20,222,719 samples, 0.01%)</title><rect x="276.6" y="1189" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="279.63" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (24,063,160 samples, 0.01%)</title><rect x="564.1" y="1141" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="567.06" y="1151.5" ></text>
</g>
<g >
<title>wp_page_copy (237,552,997 samples, 0.10%)</title><rect x="230.1" y="1157" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="233.07" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (23,821,455 samples, 0.01%)</title><rect x="614.7" y="1125" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="617.69" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (142,178,876 samples, 0.06%)</title><rect x="1048.1" y="1173" width="0.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1051.07" y="1183.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (20,121,783 samples, 0.01%)</title><rect x="671.9" y="837" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="674.92" y="847.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Scoped_node::~_Scoped_node (45,178,221 samples, 0.02%)</title><rect x="767.9" y="1157" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="770.93" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (95,115,349 samples, 0.04%)</title><rect x="610.8" y="1141" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="613.78" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (142,496,348 samples, 0.06%)</title><rect x="552.0" y="1205" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="555.03" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,896,381 samples, 0.01%)</title><rect x="1003.9" y="1061" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1006.89" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_nodes (505,844,039 samples, 0.21%)</title><rect x="1126.9" y="1173" width="2.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1129.91" y="1183.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (216,648,742 samples, 0.09%)</title><rect x="562.9" y="1125" width="1.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="565.86" y="1135.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,897,498 samples, 0.02%)</title><rect x="1015.3" y="1141" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1018.27" y="1151.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find (145,254,012 samples, 0.06%)</title><rect x="276.3" y="1237" width="0.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="279.32" y="1247.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="757" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="767.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (23,868,750 samples, 0.01%)</title><rect x="760.2" y="1077" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="763.19" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (2,286,272,885 samples, 0.97%)</title><rect x="752.6" y="1125" width="11.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="755.64" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (233,866,950 samples, 0.10%)</title><rect x="1120.1" y="1173" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1123.05" y="1183.5" ></text>
</g>
<g >
<title>napi_complete_done (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1173" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="275.07" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (47,583,734 samples, 0.02%)</title><rect x="897.1" y="1077" width="0.2" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="900.08" y="1087.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (22,691,762 samples, 0.01%)</title><rect x="938.1" y="1173" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="941.07" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (161,735,383 samples, 0.07%)</title><rect x="1120.4" y="1141" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1123.41" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,080,093,404 samples, 0.88%)</title><rect x="894.0" y="1125" width="10.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="896.97" y="1135.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1221" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="148.14" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_AllocNode (46,380,828 samples, 0.02%)</title><rect x="772.9" y="1189" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="775.90" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (635,573,381 samples, 0.27%)</title><rect x="653.9" y="1157" width="3.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="656.85" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (882,393,878 samples, 0.37%)</title><rect x="1044.6" y="1189" width="4.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1047.61" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (22,969,614 samples, 0.01%)</title><rect x="1003.4" y="1045" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1006.42" y="1055.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (70,355,743 samples, 0.03%)</title><rect x="1153.4" y="1237" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1156.35" y="1247.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (47,637,183 samples, 0.02%)</title><rect x="444.5" y="1205" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="447.53" y="1215.5" ></text>
</g>
<g >
<title>gro_normal_list.part.0 (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1157" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="275.07" y="1167.5" ></text>
</g>
<g >
<title>__tls_get_addr (44,109,309 samples, 0.02%)</title><rect x="861.2" y="1157" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="864.24" y="1167.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (94,597,286 samples, 0.04%)</title><rect x="725.3" y="1077" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="728.25" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (191,831,665 samples, 0.08%)</title><rect x="680.5" y="1173" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="683.48" y="1183.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1077" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="872.25" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_S_forward_key (23,815,282 samples, 0.01%)</title><rect x="767.8" y="1157" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="770.81" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (46,715,574 samples, 0.02%)</title><rect x="793.7" y="1189" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="796.68" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (144,885,029 samples, 0.06%)</title><rect x="995.2" y="1109" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="998.16" y="1119.5" ></text>
</g>
<g >
<title>__tls_get_addr (22,738,005 samples, 0.01%)</title><rect x="1098.3" y="1205" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1101.33" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, pair_hash, true&gt;::_M_cget (24,347,650 samples, 0.01%)</title><rect x="1075.9" y="1157" width="0.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1078.94" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (95,357,879 samples, 0.04%)</title><rect x="739.8" y="1061" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="742.84" y="1071.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,658,640 samples, 0.01%)</title><rect x="736.3" y="1093" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="739.32" y="1103.5" ></text>
</g>
<g >
<title>mmput (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1205" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1190.94" y="1215.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (23,744,839 samples, 0.01%)</title><rect x="897.1" y="1045" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="900.08" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="629" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="639.5" ></text>
</g>
<g >
<title>amd_clear_divider (24,066,527 samples, 0.01%)</title><rect x="231.5" y="1253" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="234.49" y="1263.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (167,301,501 samples, 0.07%)</title><rect x="858.0" y="1173" width="0.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="861.01" y="1183.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::end (84,086,781 samples, 0.04%)</title><rect x="909.2" y="1189" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="912.16" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (331,865,197 samples, 0.14%)</title><rect x="526.4" y="1109" width="1.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="529.38" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (1,648,382,090 samples, 0.70%)</title><rect x="608.6" y="1157" width="8.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="611.57" y="1167.5" ></text>
</g>
<g >
<title>gro_normal_list.part.0 (20,121,783 samples, 0.01%)</title><rect x="671.9" y="997" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="674.92" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,216,486,091 samples, 0.51%)</title><rect x="499.0" y="1125" width="6.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="501.97" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (48,008,081 samples, 0.02%)</title><rect x="874.5" y="1077" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="877.52" y="1087.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (116,764,622 samples, 0.05%)</title><rect x="509.2" y="1109" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="512.22" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (23,833,009 samples, 0.01%)</title><rect x="896.7" y="1045" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="899.72" y="1055.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (68,962,171 samples, 0.03%)</title><rect x="1038.8" y="1205" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1041.78" y="1215.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::begin (166,985,234 samples, 0.07%)</title><rect x="1124.8" y="1205" width="0.8" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1127.77" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (47,936,227 samples, 0.02%)</title><rect x="614.1" y="1125" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="617.09" y="1135.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (45,112,157 samples, 0.02%)</title><rect x="187.7" y="1269" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="190.71" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1077" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node_tr&lt;int&gt; (93,156,135 samples, 0.04%)</title><rect x="716.2" y="1141" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="719.19" y="1151.5" ></text>
</g>
<g >
<title>operator new (142,152,868 samples, 0.06%)</title><rect x="401.0" y="1205" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="404.04" y="1215.5" ></text>
</g>
<g >
<title>__tls_get_addr (21,972,291 samples, 0.01%)</title><rect x="1093.5" y="1189" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1096.49" y="1199.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (47,264,741 samples, 0.02%)</title><rect x="178.7" y="1269" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="181.70" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (239,519,549 samples, 0.10%)</title><rect x="1076.9" y="1173" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1079.90" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (165,150,442 samples, 0.07%)</title><rect x="13.7" y="1205" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1215.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,122,247 samples, 0.01%)</title><rect x="692.8" y="1189" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="695.83" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (45,676,225 samples, 0.02%)</title><rect x="716.0" y="1125" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="718.96" y="1135.5" ></text>
</g>
<g >
<title>sat (778,245,482 samples, 0.33%)</title><rect x="375.2" y="1221" width="3.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="378.23" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (23,356,575 samples, 0.01%)</title><rect x="588.6" y="1109" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="591.58" y="1119.5" ></text>
</g>
<g >
<title>handle_mm_fault (96,871,213 samples, 0.04%)</title><rect x="190.3" y="1189" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="193.29" y="1199.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (23,001,624 samples, 0.01%)</title><rect x="701.5" y="1093" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="704.55" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (3,735,700,967 samples, 1.58%)</title><rect x="726.0" y="1141" width="18.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="728.96" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (46,406,591 samples, 0.02%)</title><rect x="1034.2" y="1109" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1037.17" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (46,253,902 samples, 0.02%)</title><rect x="1033.7" y="1093" width="0.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1036.70" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (45,613,803 samples, 0.02%)</title><rect x="1015.0" y="1141" width="0.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1018.04" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (831,362,750 samples, 0.35%)</title><rect x="712.0" y="1141" width="4.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="715.03" y="1151.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (144,026,414 samples, 0.06%)</title><rect x="230.1" y="1125" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="233.07" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,503,627 samples, 0.02%)</title><rect x="938.7" y="1173" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="941.66" y="1183.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (24,041,681 samples, 0.01%)</title><rect x="723.0" y="1061" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="726.03" y="1071.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::pop_front (915,057,118 samples, 0.39%)</title><rect x="386.3" y="1221" width="4.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="389.29" y="1231.5" ></text>
</g>
<g >
<title>update_process_times (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1141" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="148.14" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_Node_iterator_base (47,128,642 samples, 0.02%)</title><rect x="438.4" y="1189" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="441.40" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (69,209,007 samples, 0.03%)</title><rect x="279.0" y="1237" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="281.97" y="1247.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (48,553,676 samples, 0.02%)</title><rect x="575.3" y="1173" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="578.31" y="1183.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::begin (116,767,467 samples, 0.05%)</title><rect x="1098.3" y="1221" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1101.33" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (22,646,379 samples, 0.01%)</title><rect x="528.3" y="1125" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="531.28" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (20,120,379 samples, 0.01%)</title><rect x="276.3" y="1189" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="279.32" y="1199.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (49,021,527 samples, 0.02%)</title><rect x="712.5" y="1125" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="715.50" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (211,115,818 samples, 0.09%)</title><rect x="443.5" y="1205" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="446.47" y="1215.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (23,766,310 samples, 0.01%)</title><rect x="923.6" y="1141" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="926.58" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (23,945,338 samples, 0.01%)</title><rect x="902.1" y="1077" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="905.12" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (668,190,896 samples, 0.28%)</title><rect x="433.6" y="1189" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="436.62" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::__small_size_threshold (93,663,181 samples, 0.04%)</title><rect x="768.2" y="1157" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="771.15" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,109,400 samples, 0.01%)</title><rect x="620.2" y="1205" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="623.21" y="1215.5" ></text>
</g>
<g >
<title>tick_sched_handle (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1029" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="872.25" y="1039.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (71,360,918 samples, 0.03%)</title><rect x="1013.8" y="1141" width="0.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1016.85" y="1151.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (546,632,749 samples, 0.23%)</title><rect x="195.0" y="1221" width="2.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="198.05" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (71,777,052 samples, 0.03%)</title><rect x="534.0" y="1141" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="536.95" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="53" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="63.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (527,646,474 samples, 0.22%)</title><rect x="1095.0" y="1221" width="2.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1098.00" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_addr (24,110,638 samples, 0.01%)</title><rect x="526.9" y="1093" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="529.86" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::__small_size_threshold (24,023,541 samples, 0.01%)</title><rect x="883.4" y="1141" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="886.43" y="1151.5" ></text>
</g>
<g >
<title>get_vma_policy.part.0 (23,988,906 samples, 0.01%)</title><rect x="197.3" y="1093" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="200.30" y="1103.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long long&gt;::operator (185,401,926 samples, 0.08%)</title><rect x="881.4" y="1077" width="0.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="884.38" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_aux&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (120,157,512 samples, 0.05%)</title><rect x="772.3" y="1189" width="0.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="775.30" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1093" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1103.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::find (119,760,334 samples, 0.05%)</title><rect x="565.6" y="1221" width="0.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="568.60" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (20,120,379 samples, 0.01%)</title><rect x="276.3" y="1205" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="279.32" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="677" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="687.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (45,821,633 samples, 0.02%)</title><rect x="516.2" y="1141" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="519.23" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (92,214,635 samples, 0.04%)</title><rect x="1154.2" y="1237" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1157.17" y="1247.5" ></text>
</g>
<g >
<title>task_tick_fair (24,086,193 samples, 0.01%)</title><rect x="869.2" y="997" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="872.25" y="1007.5" ></text>
</g>
<g >
<title>do_user_addr_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1221" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1168.56" y="1231.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (23,170,080 samples, 0.01%)</title><rect x="1095.5" y="1205" width="0.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1098.48" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,432,439,302 samples, 0.61%)</title><rect x="1004.5" y="1093" width="7.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1007.47" y="1103.5" ></text>
</g>
<g >
<title>tick_sched_handle (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1029" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="738.13" y="1039.5" ></text>
</g>
<g >
<title>[CCAnr] (24,830,987 samples, 0.01%)</title><rect x="1049.6" y="1189" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1052.63" y="1199.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert (153,298,812 samples, 0.06%)</title><rect x="277.0" y="1237" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="280.04" y="1247.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_M_set_node (23,605,388 samples, 0.01%)</title><rect x="403.3" y="1157" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="406.30" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (23,769,095 samples, 0.01%)</title><rect x="528.2" y="1109" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="531.16" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2,955,833,355 samples, 1.25%)</title><rect x="454.7" y="1189" width="14.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="457.74" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (47,832,604 samples, 0.02%)</title><rect x="999.3" y="1093" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1002.30" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (22,642,195 samples, 0.01%)</title><rect x="1012.2" y="1125" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1015.21" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (46,466,484 samples, 0.02%)</title><rect x="882.3" y="1093" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="885.30" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (22,764,492 samples, 0.01%)</title><rect x="616.7" y="1141" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="619.69" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="853" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="863.5" ></text>
</g>
<g >
<title>alloc_pages_vma (72,096,271 samples, 0.03%)</title><rect x="196.9" y="1093" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="199.94" y="1103.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,708,121 samples, 0.02%)</title><rect x="890.2" y="1125" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="893.18" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (72,364,269 samples, 0.03%)</title><rect x="519.9" y="1141" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="522.87" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (70,226,085 samples, 0.03%)</title><rect x="901.8" y="1077" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="904.77" y="1087.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator* (73,507,433 samples, 0.03%)</title><rect x="920.7" y="1157" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="923.74" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (48,841,305 samples, 0.02%)</title><rect x="1034.9" y="1109" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1037.88" y="1119.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;int, int&gt;, int, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::lower_bound (165,350,556 samples, 0.07%)</title><rect x="275.5" y="1221" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="278.49" y="1231.5" ></text>
</g>
<g >
<title>__tls_get_addr (24,888,600 samples, 0.01%)</title><rect x="868.4" y="1125" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="871.41" y="1135.5" ></text>
</g>
<g >
<title>nf_nat_ipv4_local_in (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1029" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="275.07" y="1039.5" ></text>
</g>
<g >
<title>ixgbe_poll (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1061" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1076.47" y="1071.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000000000l&gt;, double, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (233,593,699 samples, 0.10%)</title><rect x="1093.6" y="1189" width="1.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1096.60" y="1199.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (22,103,657 samples, 0.01%)</title><rect x="200.6" y="1221" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="203.60" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (47,415,625 samples, 0.02%)</title><rect x="765.1" y="1141" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="768.12" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (399,858,545 samples, 0.17%)</title><rect x="895.7" y="1109" width="2.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="898.68" y="1119.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (47,278,781 samples, 0.02%)</title><rect x="688.2" y="1205" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="691.16" y="1215.5" ></text>
</g>
<g >
<title>vm_normal_page (47,718,914 samples, 0.02%)</title><rect x="229.8" y="1157" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="232.83" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (158,794,136 samples, 0.07%)</title><rect x="444.8" y="1205" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="447.76" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_NodeBuilder&lt;std::__detail::_Identity&gt;::_S_build&lt;int const&amp;, int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (2,571,424,262 samples, 1.09%)</title><rect x="752.3" y="1141" width="12.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="755.28" y="1151.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (46,982,405 samples, 0.02%)</title><rect x="532.7" y="1125" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="535.66" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (47,832,448 samples, 0.02%)</title><rect x="1008.8" y="1061" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1011.83" y="1071.5" ></text>
</g>
<g >
<title>ip_sublist_rcv (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1093" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="275.07" y="1103.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (22,631,187 samples, 0.01%)</title><rect x="762.7" y="1077" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="765.75" y="1087.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (71,766,953 samples, 0.03%)</title><rect x="371.6" y="1205" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="374.55" y="1215.5" ></text>
</g>
<g >
<title>std::addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (47,554,763 samples, 0.02%)</title><rect x="1129.0" y="1109" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1131.96" y="1119.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="293" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (23,528,058 samples, 0.01%)</title><rect x="559.0" y="1125" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="561.97" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (92,945,345 samples, 0.04%)</title><rect x="906.2" y="1109" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="909.24" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_store_code (47,775,009 samples, 0.02%)</title><rect x="751.7" y="1141" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="754.68" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;std::hash&lt;int&gt; &gt;::__small_size_threshold (23,964,722 samples, 0.01%)</title><rect x="545.2" y="1189" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="548.23" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,390,044,813 samples, 1.01%)</title><rect x="892.7" y="1141" width="11.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="895.66" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4,000,601,198 samples, 1.69%)</title><rect x="865.1" y="1157" width="20.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="868.11" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (126,676,589 samples, 0.05%)</title><rect x="744.0" y="1125" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="746.98" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_update_next_event (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1173" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1150.58" y="1183.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (22,192,534 samples, 0.01%)</title><rect x="390.3" y="1189" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="393.29" y="1199.5" ></text>
</g>
<g >
<title>__handle_mm_fault (61,536,119 samples, 0.03%)</title><rect x="1163.0" y="1189" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1166.02" y="1199.5" ></text>
</g>
<g >
<title>__next_zones_zonelist (24,868,138 samples, 0.01%)</title><rect x="230.1" y="1109" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="233.07" y="1119.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (47,154,153 samples, 0.02%)</title><rect x="991.8" y="1141" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="994.84" y="1151.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (47,096,411 samples, 0.02%)</title><rect x="619.2" y="1205" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="622.16" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::__small_size_threshold (23,401,704 samples, 0.01%)</title><rect x="1052.1" y="1189" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1055.11" y="1199.5" ></text>
</g>
<g >
<title>checkQFlipOrRev (1,055,828,096 samples, 0.45%)</title><rect x="1109.1" y="1205" width="5.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1112.07" y="1215.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (71,521,041 samples, 0.03%)</title><rect x="1051.1" y="1189" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1054.06" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (2,146,168,162 samples, 0.91%)</title><rect x="606.2" y="1173" width="10.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="609.20" y="1183.5" ></text>
</g>
<g >
<title>down_read_trylock (20,130,991 samples, 0.01%)</title><rect x="1163.3" y="1221" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1166.33" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (13,208,073,789 samples, 5.59%)</title><rect x="470.5" y="1189" width="65.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="473.45" y="1199.5" >std::_H..</text>
</g>
<g >
<title>prepare_exit_to_usermode (191,523,274 samples, 0.08%)</title><rect x="231.6" y="1253" width="1.0" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="234.61" y="1263.5" ></text>
</g>
<g >
<title>vmacache_find (24,693,978 samples, 0.01%)</title><rect x="228.9" y="1189" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="231.89" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (47,766,994 samples, 0.02%)</title><rect x="564.5" y="1173" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="567.54" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (23,197,518 samples, 0.01%)</title><rect x="742.2" y="1093" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="745.22" y="1103.5" ></text>
</g>
<g >
<title>page_fault (411,727,148 samples, 0.17%)</title><rect x="1161.5" y="1269" width="2.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1164.47" y="1279.5" ></text>
</g>
<g >
<title>all (236,318,808,436 samples, 100%)</title><rect x="10.0" y="1317" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1327.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1093" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="738.13" y="1103.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (93,300,920 samples, 0.04%)</title><rect x="458.4" y="1173" width="0.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="461.40" y="1183.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (48,902,406 samples, 0.02%)</title><rect x="203.2" y="1269" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="206.17" y="1279.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,018,454 samples, 0.01%)</title><rect x="1027.3" y="1077" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1030.32" y="1087.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (118,101,720 samples, 0.05%)</title><rect x="901.2" y="1061" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="904.18" y="1071.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadContextBase::OnJoined (1,276,349,057 samples, 0.54%)</title><rect x="195.0" y="1269" width="6.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="198.05" y="1279.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (914,459,867 samples, 0.39%)</title><rect x="667.5" y="1125" width="4.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="670.45" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,368,203,362 samples, 0.58%)</title><rect x="538.4" y="1189" width="6.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="541.40" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (23,197,093 samples, 0.01%)</title><rect x="905.7" y="1109" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="908.66" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (117,810,661 samples, 0.05%)</title><rect x="588.5" y="1125" width="0.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="591.45" y="1135.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (20,119,054 samples, 0.01%)</title><rect x="230.8" y="1141" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="233.79" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (68,858,923 samples, 0.03%)</title><rect x="510.2" y="1141" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="513.16" y="1151.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1045" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="895.56" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,120,326 samples, 0.01%)</title><rect x="656.7" y="1125" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="659.69" y="1135.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::find (5,774,095,532 samples, 2.44%)</title><rect x="1049.5" y="1205" width="28.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1052.51" y="1215.5" >st..</text>
</g>
<g >
<title>__sanitizer::mem_is_zero (71,065,728 samples, 0.03%)</title><rect x="201.4" y="1269" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="204.42" y="1279.5" ></text>
</g>
<g >
<title>unsat (640,996,428 samples, 0.27%)</title><rect x="783.4" y="1221" width="3.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="786.40" y="1231.5" ></text>
</g>
<g >
<title>read_tsc (23,992,160 samples, 0.01%)</title><rect x="469.3" y="1093" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="472.25" y="1103.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (22,707,349 samples, 0.01%)</title><rect x="1038.5" y="1173" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1041.55" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (47,059,062 samples, 0.02%)</title><rect x="588.8" y="1077" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="591.81" y="1087.5" ></text>
</g>
<g >
<title>do_IRQ (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1253" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="275.07" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (47,019,781 samples, 0.02%)</title><rect x="765.4" y="1141" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="768.35" y="1151.5" ></text>
</g>
<g >
<title>ixgbe_clean_tx_irq (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1045" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1076.47" y="1055.5" ></text>
</g>
<g >
<title>ip_local_deliver (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1061" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="275.07" y="1071.5" ></text>
</g>
<g >
<title>do_page_fault (144,798,433 samples, 0.06%)</title><rect x="190.0" y="1237" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="193.05" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (22,632,704 samples, 0.01%)</title><rect x="1020.7" y="1093" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1023.74" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="389" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="399.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (72,011,690 samples, 0.03%)</title><rect x="899.7" y="1093" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="902.67" y="1103.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, int**, int**&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1141" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="406.41" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (2,039,488,461 samples, 0.86%)</title><rect x="594.4" y="1157" width="10.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="597.39" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (49,413,535 samples, 0.02%)</title><rect x="575.1" y="1173" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="578.06" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (579,089,746 samples, 0.25%)</title><rect x="506.3" y="1125" width="2.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="509.33" y="1135.5" ></text>
</g>
<g >
<title>[CCAnr] (71,676,397 samples, 0.03%)</title><rect x="371.2" y="1221" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="374.20" y="1231.5" ></text>
</g>
<g >
<title>__tls_get_addr (93,278,765 samples, 0.04%)</title><rect x="567.5" y="1205" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="570.51" y="1215.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (23,544,774 samples, 0.01%)</title><rect x="203.4" y="1269" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="206.41" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (23,843,848 samples, 0.01%)</title><rect x="534.5" y="1157" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="537.54" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (119,063,665 samples, 0.05%)</title><rect x="1018.5" y="1125" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1021.46" y="1135.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (22,518,432 samples, 0.01%)</title><rect x="204.8" y="1237" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="207.80" y="1247.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::__small_size_threshold (24,029,033 samples, 0.01%)</title><rect x="536.4" y="1189" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="539.40" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="501" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_ConvertToValueType&lt;std::__detail::_Identity, int&gt;::operator (23,908,164 samples, 0.01%)</title><rect x="771.3" y="1173" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="774.35" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (22,712,529 samples, 0.01%)</title><rect x="883.1" y="1125" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="886.08" y="1135.5" ></text>
</g>
<g >
<title>do_syscall_64 (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1253" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1188.23" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="277" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (236,605,016 samples, 0.10%)</title><rect x="904.8" y="1141" width="1.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="907.83" y="1151.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (73,358,700 samples, 0.03%)</title><rect x="228.5" y="1189" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="231.52" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (46,524,691 samples, 0.02%)</title><rect x="555.9" y="1173" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="558.93" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (47,614,163 samples, 0.02%)</title><rect x="562.6" y="1125" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="565.62" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (23,087,860 samples, 0.01%)</title><rect x="1030.0" y="1045" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1033.04" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;long long&gt;, true&gt;::_M_cget (22,969,614 samples, 0.01%)</title><rect x="1003.4" y="1029" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1006.42" y="1039.5" ></text>
</g>
<g >
<title>__strpbrk_sse42 (254,723,219 samples, 0.11%)</title><rect x="201.9" y="1269" width="1.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="204.90" y="1279.5" ></text>
</g>
<g >
<title>irq_exit (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1237" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="275.07" y="1247.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (140,244,248 samples, 0.06%)</title><rect x="1056.8" y="1173" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1059.80" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="901" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="911.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (72,367,729 samples, 0.03%)</title><rect x="194.4" y="1269" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="197.44" y="1279.5" ></text>
</g>
<g >
<title>__tls_get_addr (24,642,873 samples, 0.01%)</title><rect x="1095.6" y="1205" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1098.60" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (24,934,561 samples, 0.01%)</title><rect x="1039.1" y="1205" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1042.12" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_M_incr (27,100,106 samples, 0.01%)</title><rect x="1122.3" y="1205" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1125.28" y="1215.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (168,334,864 samples, 0.07%)</title><rect x="599.7" y="1109" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="602.68" y="1119.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (23,911,405 samples, 0.01%)</title><rect x="203.6" y="1237" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="206.65" y="1247.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (4,287,952,091 samples, 1.81%)</title><rect x="885.5" y="1173" width="21.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="888.53" y="1183.5" >s..</text>
</g>
<g >
<title>rcu_sched_clock_irq (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1125" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="148.14" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (836,323,149 samples, 0.35%)</title><rect x="677.9" y="1189" width="4.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="680.87" y="1199.5" ></text>
</g>
<g >
<title>rmqueue (24,517,196 samples, 0.01%)</title><rect x="190.4" y="1093" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="193.41" y="1103.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (72,482,019 samples, 0.03%)</title><rect x="937.7" y="1173" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="940.71" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (47,247,479 samples, 0.02%)</title><rect x="665.7" y="1125" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="668.69" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::operator== (70,905,788 samples, 0.03%)</title><rect x="986.6" y="1157" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="989.55" y="1167.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;&amp;&gt; (47,761,320 samples, 0.02%)</title><rect x="766.3" y="1141" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="769.30" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (24,144,190 samples, 0.01%)</title><rect x="656.9" y="1141" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="659.91" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (46,685,041 samples, 0.02%)</title><rect x="560.0" y="1141" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="563.03" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (144,885,029 samples, 0.06%)</title><rect x="995.2" y="1125" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="998.16" y="1135.5" ></text>
</g>
<g >
<title>[CCAnr] (24,008,203 samples, 0.01%)</title><rect x="402.6" y="1173" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="405.57" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="101" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (22,723,118 samples, 0.01%)</title><rect x="986.4" y="1157" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="989.44" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (46,428,796 samples, 0.02%)</title><rect x="948.8" y="1157" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="951.78" y="1167.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1205" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="148.14" y="1215.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (46,859,284 samples, 0.02%)</title><rect x="556.9" y="1173" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="559.87" y="1183.5" ></text>
</g>
<g >
<title>__tls_get_addr (48,369,294 samples, 0.02%)</title><rect x="812.8" y="1173" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="815.85" y="1183.5" ></text>
</g>
<g >
<title>operator delete (23,593,382 samples, 0.01%)</title><rect x="596.6" y="1125" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="599.61" y="1135.5" ></text>
</g>
<g >
<title>[CCAnr] (23,924,296 samples, 0.01%)</title><rect x="493.8" y="1141" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="496.78" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (94,205,247 samples, 0.04%)</title><rect x="743.5" y="1125" width="0.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="746.51" y="1135.5" ></text>
</g>
<g >
<title>exit_mmap (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1189" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1190.94" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (23,844,823 samples, 0.01%)</title><rect x="564.9" y="1189" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="567.90" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (118,101,720 samples, 0.05%)</title><rect x="901.2" y="1077" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="904.18" y="1087.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;::count (23,592,239 samples, 0.01%)</title><rect x="1092.9" y="1205" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1095.89" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;std::hash&lt;int&gt; &gt;::__small_size_threshold (24,078,958 samples, 0.01%)</title><rect x="682.0" y="1189" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="685.05" y="1199.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (23,748,458 samples, 0.01%)</title><rect x="908.8" y="1189" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="911.81" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1,049,775,437 samples, 0.44%)</title><rect x="1006.4" y="1077" width="5.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1009.38" y="1087.5" ></text>
</g>
<g >
<title>__sanitizer_free_hook (24,925,107 samples, 0.01%)</title><rect x="201.8" y="1269" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="204.77" y="1279.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (69,991,855 samples, 0.03%)</title><rect x="1044.1" y="1189" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1047.14" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (46,548,874 samples, 0.02%)</title><rect x="751.4" y="1125" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="754.45" y="1135.5" ></text>
</g>
<g >
<title>irq_exit (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1157" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="693.04" y="1167.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (48,931,726 samples, 0.02%)</title><rect x="1128.0" y="1109" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1130.99" y="1119.5" ></text>
</g>
<g >
<title>is_qualified_pairs (23,838,120 samples, 0.01%)</title><rect x="374.9" y="1221" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="377.87" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (22,795,579 samples, 0.01%)</title><rect x="900.1" y="1093" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="903.13" y="1103.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (66,692,803 samples, 0.03%)</title><rect x="808.1" y="1173" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="811.06" y="1183.5" ></text>
</g>
<g >
<title>ip_list_rcv (20,121,783 samples, 0.01%)</title><rect x="671.9" y="949" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="674.92" y="959.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (166,606,988 samples, 0.07%)</title><rect x="561.3" y="1109" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="564.33" y="1119.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (49,078,912 samples, 0.02%)</title><rect x="190.3" y="1125" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="193.29" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (2,552,563,515 samples, 1.08%)</title><rect x="13.7" y="1253" width="12.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (23,471,904 samples, 0.01%)</title><rect x="771.5" y="1173" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="774.47" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,514,177,354 samples, 1.06%)</title><rect x="999.7" y="1125" width="12.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1002.65" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (96,279,174 samples, 0.04%)</title><rect x="566.8" y="1205" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="569.79" y="1215.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (46,555,398 samples, 0.02%)</title><rect x="374.4" y="1221" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="377.41" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (355,517,733 samples, 0.15%)</title><rect x="556.2" y="1189" width="1.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="559.16" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (23,394,807 samples, 0.01%)</title><rect x="1099.0" y="1189" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1102.04" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (23,961,032 samples, 0.01%)</title><rect x="614.6" y="1125" width="0.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="617.57" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1189" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1150.58" y="1199.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (24,077,320 samples, 0.01%)</title><rect x="1124.2" y="1189" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1127.16" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (22,536,731 samples, 0.01%)</title><rect x="723.6" y="1109" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="726.62" y="1119.5" ></text>
</g>
<g >
<title>__interceptor_clock_gettime.part.0 (47,774,054 samples, 0.02%)</title><rect x="280.0" y="1237" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="283.05" y="1247.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (142,210,286 samples, 0.06%)</title><rect x="764.4" y="1125" width="0.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="767.41" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (278,498,211 samples, 0.12%)</title><rect x="809.9" y="1173" width="1.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="812.91" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3,701,627,963 samples, 1.57%)</title><rect x="492.7" y="1157" width="18.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="495.74" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::__detail::_Select1st, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (24,057,002 samples, 0.01%)</title><rect x="1061.4" y="1157" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1064.36" y="1167.5" ></text>
</g>
<g >
<title>__tls_get_addr (22,986,740 samples, 0.01%)</title><rect x="873.9" y="1093" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="876.94" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,791,672,052 samples, 1.18%)</title><rect x="869.5" y="1141" width="13.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="872.49" y="1151.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::size (3,863,938,740 samples, 1.64%)</title><rect x="404.8" y="1221" width="19.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="407.82" y="1231.5" ></text>
</g>
<g >
<title>is_valuable_for_noncritical (23,957,562 samples, 0.01%)</title><rect x="1114.3" y="1205" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1117.34" y="1215.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (2,795,619,873 samples, 1.18%)</title><rect x="390.9" y="1221" width="13.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="393.86" y="1231.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,700,166 samples, 0.01%)</title><rect x="10.1" y="1269" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.07" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (24,712,886 samples, 0.01%)</title><rect x="773.2" y="1189" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="776.25" y="1199.5" ></text>
</g>
<g >
<title>page_fault (192,848,751 samples, 0.08%)</title><rect x="189.8" y="1253" width="1.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="192.81" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (46,620,438 samples, 0.02%)</title><rect x="558.9" y="1141" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="561.85" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (23,858,312 samples, 0.01%)</title><rect x="656.5" y="1109" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="659.45" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (306,645,507 samples, 0.13%)</title><rect x="998.0" y="1109" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1001.01" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (117,960,478 samples, 0.05%)</title><rect x="1066.0" y="1141" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1068.98" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (353,414,943 samples, 0.15%)</title><rect x="1024.1" y="1077" width="1.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1027.14" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (22,738,138 samples, 0.01%)</title><rect x="1061.6" y="1125" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1064.60" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (69,332,445 samples, 0.03%)</title><rect x="712.7" y="1125" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="715.75" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_M_next (209,152,123 samples, 0.09%)</title><rect x="534.7" y="1173" width="1.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="537.66" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (141,886,926 samples, 0.06%)</title><rect x="750.6" y="1125" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="753.62" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (932,280,130 samples, 0.39%)</title><rect x="568.0" y="1205" width="4.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="570.97" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (22,955,578 samples, 0.01%)</title><rect x="656.8" y="1141" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="659.79" y="1151.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (71,506,798 samples, 0.03%)</title><rect x="895.7" y="1093" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="898.68" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (95,725,658 samples, 0.04%)</title><rect x="14.1" y="1189" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="17.08" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (24,073,164 samples, 0.01%)</title><rect x="758.1" y="1077" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="761.06" y="1087.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (22,596,455 samples, 0.01%)</title><rect x="885.6" y="1157" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="888.64" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (24,074,737 samples, 0.01%)</title><rect x="675.3" y="1189" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="678.30" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,247,479 samples, 0.02%)</title><rect x="665.7" y="1109" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="668.69" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::erase (9,182,373,031 samples, 3.89%)</title><rect x="573.0" y="1205" width="45.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="575.95" y="1215.5" >std:..</text>
</g>
<g >
<title>__asan::Allocator::Allocate (3,632,639,827 samples, 1.54%)</title><rect x="214.7" y="1285" width="18.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="217.66" y="1295.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (24,349,303 samples, 0.01%)</title><rect x="926.2" y="1125" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="929.22" y="1135.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (59,593,520 samples, 0.03%)</title><rect x="1188.2" y="1093" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1191.25" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (93,532,813 samples, 0.04%)</title><rect x="1107.5" y="1205" width="0.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1110.54" y="1215.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::__small_size_threshold (164,625,734 samples, 0.07%)</title><rect x="745.9" y="1141" width="0.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="748.89" y="1151.5" ></text>
</g>
<g >
<title>irq_exit (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1125" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="860.08" y="1135.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (47,776,134 samples, 0.02%)</title><rect x="896.8" y="1061" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="899.84" y="1071.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (657,171,994 samples, 0.28%)</title><rect x="759.0" y="1093" width="3.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="762.00" y="1103.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (139,229,849 samples, 0.06%)</title><rect x="988.3" y="1157" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="991.34" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (23,866,229 samples, 0.01%)</title><rect x="1025.6" y="1061" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1028.55" y="1071.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (24,044,929 samples, 0.01%)</title><rect x="874.6" y="1045" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="877.64" y="1055.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::_M_reallocate_map (94,011,036 samples, 0.04%)</title><rect x="403.2" y="1173" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="406.18" y="1183.5" ></text>
</g>
<g >
<title>std::operator+ (1,003,211,312 samples, 0.42%)</title><rect x="921.5" y="1157" width="5.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="924.45" y="1167.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (48,538,730 samples, 0.02%)</title><rect x="230.9" y="1141" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="233.89" y="1151.5" ></text>
</g>
<g >
<title>__asan::asan_delete (632,613,925 samples, 0.27%)</title><rect x="175.5" y="1269" width="3.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="178.54" y="1279.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (163,770,412 samples, 0.07%)</title><rect x="1129.4" y="1205" width="0.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1132.44" y="1215.5" ></text>
</g>
<g >
<title>ret_from_intr (23,968,092 samples, 0.01%)</title><rect x="375.1" y="1221" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="378.11" y="1231.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (23,822,509 samples, 0.01%)</title><rect x="1095.8" y="1205" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1098.84" y="1215.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (93,382,455 samples, 0.04%)</title><rect x="1009.5" y="1045" width="0.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1012.53" y="1055.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (24,117,597 samples, 0.01%)</title><rect x="883.5" y="1141" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="886.55" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (567,991,910 samples, 0.24%)</title><rect x="1023.3" y="1093" width="2.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1026.31" y="1103.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, int&gt; (40,248,319 samples, 0.02%)</title><rect x="276.1" y="1157" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="279.12" y="1167.5" ></text>
</g>
<g >
<title>skb_release_all (20,121,783 samples, 0.01%)</title><rect x="671.9" y="757" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="674.92" y="767.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (24,159,862 samples, 0.01%)</title><rect x="189.5" y="1141" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="192.46" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (49,247,470 samples, 0.02%)</title><rect x="1078.1" y="1189" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1081.09" y="1199.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (48,871,688 samples, 0.02%)</title><rect x="197.5" y="1205" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="200.53" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (46,524,691 samples, 0.02%)</title><rect x="555.9" y="1189" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="558.93" y="1199.5" ></text>
</g>
<g >
<title>__do_munmap (48,733,356 samples, 0.02%)</title><rect x="1185.2" y="1157" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1188.23" y="1167.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (44,112,518 samples, 0.02%)</title><rect x="232.8" y="1285" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="235.80" y="1295.5" ></text>
</g>
<g >
<title>__tls_get_addr (189,781,466 samples, 0.08%)</title><rect x="915.4" y="1173" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="918.42" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (23,957,961 samples, 0.01%)</title><rect x="614.2" y="1077" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="617.21" y="1087.5" ></text>
</g>
<g >
<title>update_load_avg (23,161,563 samples, 0.01%)</title><rect x="999.4" y="933" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1002.42" y="943.5" ></text>
</g>
<g >
<title>__tls_get_addr (115,934,760 samples, 0.05%)</title><rect x="1015.5" y="1141" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1018.51" y="1151.5" ></text>
</g>
<g >
<title>tick_sched_timer (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1125" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1127.05" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (46,925,556 samples, 0.02%)</title><rect x="1025.9" y="1077" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1028.91" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (117,103,516 samples, 0.05%)</title><rect x="1003.1" y="1061" width="0.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1006.06" y="1071.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (688,118,951 samples, 0.29%)</title><rect x="529.2" y="1125" width="3.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="532.22" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (24,876,348 samples, 0.01%)</title><rect x="903.9" y="1093" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="906.87" y="1103.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::pair&lt;int&amp;, int&amp;, true&gt; (23,454,105 samples, 0.01%)</title><rect x="425.7" y="1221" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="428.69" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (237,401,361 samples, 0.10%)</title><rect x="874.1" y="1093" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="877.05" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (46,854,494 samples, 0.02%)</title><rect x="899.4" y="1093" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="902.44" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals_tr&lt;int&gt; (422,478,116 samples, 0.18%)</title><rect x="723.7" y="1109" width="2.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="726.73" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_M_lower_bound (248,610,115 samples, 0.11%)</title><rect x="274.2" y="1205" width="1.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="277.15" y="1215.5" ></text>
</g>
<g >
<title>pthread_getspecific (95,959,442 samples, 0.04%)</title><rect x="602.7" y="1109" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="605.67" y="1119.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator+= (553,032,621 samples, 0.23%)</title><rect x="923.7" y="1141" width="2.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="926.70" y="1151.5" ></text>
</g>
<g >
<title>std::map&lt;std::pair&lt;int, int&gt;, int, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::find (248,610,115 samples, 0.11%)</title><rect x="274.2" y="1237" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="277.15" y="1247.5" ></text>
</g>
<g >
<title>irq_exit (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1061" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="895.56" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (45,910,011 samples, 0.02%)</title><rect x="885.1" y="1157" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="888.09" y="1167.5" ></text>
</g>
<g >
<title>[CCAnr] (22,596,109 samples, 0.01%)</title><rect x="712.4" y="1125" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="715.39" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (142,726,076 samples, 0.06%)</title><rect x="593.6" y="1157" width="0.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="596.57" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (93,550,795 samples, 0.04%)</title><rect x="724.7" y="1061" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="727.67" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (46,802,825 samples, 0.02%)</title><rect x="1061.5" y="1173" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1064.48" y="1183.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,791,014 samples, 0.01%)</title><rect x="909.0" y="1157" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="912.04" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (23,961,032 samples, 0.01%)</title><rect x="614.6" y="1109" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="617.57" y="1119.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (164,116,958 samples, 0.07%)</title><rect x="518.1" y="1141" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="521.11" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node_tr&lt;int&gt; (48,115,149 samples, 0.02%)</title><rect x="701.7" y="1157" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="704.66" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (47,597,513 samples, 0.02%)</title><rect x="606.0" y="1157" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="608.97" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (487,762,080 samples, 0.21%)</title><rect x="1070.6" y="1157" width="2.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1073.56" y="1167.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (24,426,206 samples, 0.01%)</title><rect x="214.5" y="1269" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="217.54" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (58,277,937 samples, 0.02%)</title><rect x="991.3" y="1141" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="994.31" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::size (72,399,326 samples, 0.03%)</title><rect x="768.6" y="1157" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="771.62" y="1167.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1125" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="751.96" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (47,883,884 samples, 0.02%)</title><rect x="904.1" y="1109" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="907.12" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (22,792,085 samples, 0.01%)</title><rect x="611.6" y="1141" width="0.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="614.61" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (355,013,618 samples, 0.15%)</title><rect x="440.4" y="1205" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="443.42" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="597" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,134,123,988 samples, 0.48%)</title><rect x="736.4" y="1093" width="5.7" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="739.44" y="1103.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::find (4,399,703,499 samples, 1.86%)</title><rect x="863.6" y="1173" width="21.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="866.56" y="1183.5" >s..</text>
</g>
<g >
<title>ret_from_intr (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1093" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="895.56" y="1103.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1237" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1188.23" y="1247.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.32] (23,990,526 samples, 0.01%)</title><rect x="278.9" y="1237" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="281.85" y="1247.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,894,943 samples, 0.02%)</title><rect x="864.9" y="1157" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="867.87" y="1167.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int*, int*&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1093" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="406.41" y="1103.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (23,215,829 samples, 0.01%)</title><rect x="197.4" y="1093" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="200.42" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1,040,171,595 samples, 0.44%)</title><rect x="1027.7" y="1077" width="5.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1030.67" y="1087.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (89,954,704 samples, 0.04%)</title><rect x="234.0" y="1285" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="236.95" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (94,621,101 samples, 0.04%)</title><rect x="863.1" y="1157" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="866.09" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (161,454,672 samples, 0.07%)</title><rect x="1029.9" y="1061" width="0.8" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1032.93" y="1071.5" ></text>
</g>
<g >
<title>operator new (24,039,924 samples, 0.01%)</title><rect x="402.8" y="1157" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="405.81" y="1167.5" ></text>
</g>
<g >
<title>run_timer_softirq (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1125" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="693.04" y="1135.5" ></text>
</g>
<g >
<title>getBestUQFirstVarAndScore (69,381,105 samples, 0.03%)</title><rect x="1091.0" y="1221" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1094.04" y="1231.5" ></text>
</g>
<g >
<title>irq_exit (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1109" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1076.47" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (70,078,984 samples, 0.03%)</title><rect x="765.6" y="1141" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="768.59" y="1151.5" ></text>
</g>
<g >
<title>__build_skb_around (20,122,582 samples, 0.01%)</title><rect x="892.6" y="949" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="895.56" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (205,352,852 samples, 0.09%)</title><rect x="536.5" y="1189" width="1.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="539.52" y="1199.5" ></text>
</g>
<g >
<title>__tls_get_addr (142,562,765 samples, 0.06%)</title><rect x="997.3" y="1109" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1000.29" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (118,142,927 samples, 0.05%)</title><rect x="657.1" y="1157" width="0.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="660.15" y="1167.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,886,829 samples, 0.01%)</title><rect x="608.1" y="1141" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="611.10" y="1151.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_S_key (43,387,420 samples, 0.02%)</title><rect x="274.8" y="1189" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="277.77" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;std::hash&lt;int&gt; &gt;::__small_size_threshold (24,029,033 samples, 0.01%)</title><rect x="536.4" y="1173" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="539.40" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,092,380 samples, 0.01%)</title><rect x="558.9" y="1125" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="561.85" y="1135.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (47,277,910 samples, 0.02%)</title><rect x="736.0" y="1093" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="738.97" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_3 (1,067,553,932 samples, 0.45%)</title><rect x="266.2" y="1285" width="5.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="269.17" y="1295.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (22,431,924 samples, 0.01%)</title><rect x="1056.7" y="1173" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1059.69" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="789" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (22,618,767 samples, 0.01%)</title><rect x="1003.5" y="1045" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1006.53" y="1055.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator[] (22,288,959 samples, 0.01%)</title><rect x="912.9" y="1189" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="915.91" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (48,054,469 samples, 0.02%)</title><rect x="1013.6" y="1125" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1016.61" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_v (93,161,312 samples, 0.04%)</title><rect x="562.2" y="1125" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="565.16" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (48,566,428 samples, 0.02%)</title><rect x="614.3" y="1125" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="617.33" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (23,796,632 samples, 0.01%)</title><rect x="793.3" y="1189" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="796.32" y="1199.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::empty (23,139,552 samples, 0.01%)</title><rect x="1091.2" y="1189" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1094.15" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (1,278,612,576 samples, 0.54%)</title><rect x="204.1" y="1253" width="6.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="207.10" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (47,832,448 samples, 0.02%)</title><rect x="1008.8" y="1045" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1011.83" y="1055.5" ></text>
</g>
<g >
<title>__tls_get_addr (118,710,337 samples, 0.05%)</title><rect x="494.8" y="1141" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="497.83" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (69,902,177 samples, 0.03%)</title><rect x="588.7" y="1109" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="591.69" y="1119.5" ></text>
</g>
<g >
<title>get_page_from_freelist (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1125" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1168.56" y="1135.5" ></text>
</g>
<g >
<title>build_neighbor_relation (1,151,531,908 samples, 0.49%)</title><rect x="272.2" y="1253" width="5.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="275.17" y="1263.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,288,654,930 samples, 0.55%)</title><rect x="178.9" y="1269" width="6.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="181.93" y="1279.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::pair&lt;int, int, true&gt; (23,019,196 samples, 0.01%)</title><rect x="1091.3" y="1205" width="0.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1094.27" y="1215.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (668,190,896 samples, 0.28%)</title><rect x="433.6" y="1173" width="3.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="436.62" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (23,255,045 samples, 0.01%)</title><rect x="992.4" y="1141" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="995.42" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2,595,547,242 samples, 1.10%)</title><rect x="1171.8" y="1285" width="12.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1174.79" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1157" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (46,633,272 samples, 0.02%)</title><rect x="749.8" y="1141" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="752.79" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::find (13,865,470,452 samples, 5.87%)</title><rect x="618.8" y="1221" width="69.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="621.80" y="1231.5" >std::un..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,514,490,854 samples, 0.64%)</title><rect x="628.1" y="1189" width="7.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="631.14" y="1199.5" ></text>
</g>
<g >
<title>unmap_page_range (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1141" width="0.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1190.94" y="1151.5" ></text>
</g>
<g >
<title>computePairDeltaOverlap (48,846,067 samples, 0.02%)</title><rect x="936.3" y="1189" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="939.27" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="613" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (23,710,901 samples, 0.01%)</title><rect x="564.8" y="1189" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="567.78" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (468,992,688 samples, 0.20%)</title><rect x="654.5" y="1141" width="2.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="657.45" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::clear (768,653,511 samples, 0.33%)</title><rect x="1125.6" y="1205" width="3.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1128.60" y="1215.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1109" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="860.08" y="1119.5" ></text>
</g>
<g >
<title>pte_alloc_one (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1125" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="194.61" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::operator++ (23,594,031 samples, 0.01%)</title><rect x="372.3" y="1221" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="375.26" y="1231.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::ReturnToAllocator (49,186,701 samples, 0.02%)</title><rect x="194.8" y="1269" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="197.80" y="1279.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (48,075,722 samples, 0.02%)</title><rect x="1005.9" y="1077" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1008.90" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_key_equals (994,502,962 samples, 0.42%)</title><rect x="611.7" y="1141" width="5.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="614.73" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (116,617,818 samples, 0.05%)</title><rect x="757.4" y="1077" width="0.5" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="760.36" y="1087.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (21,198,027 samples, 0.01%)</title><rect x="185.4" y="1269" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="188.37" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (24,426,206 samples, 0.01%)</title><rect x="214.5" y="1253" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="217.54" y="1263.5" ></text>
</g>
<g >
<title>net_rx_action (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1045" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="674.92" y="1055.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (24,939,878 samples, 0.01%)</title><rect x="1049.3" y="1189" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1052.26" y="1199.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (95,275,090 samples, 0.04%)</title><rect x="989.4" y="1141" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="992.39" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (1,328,782,689 samples, 0.56%)</title><rect x="566.2" y="1221" width="6.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="569.20" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="725" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="735.5" ></text>
</g>
<g >
<title>get_page_from_freelist (96,245,367 samples, 0.04%)</title><rect x="189.0" y="1109" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="191.98" y="1119.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (22,940,900 samples, 0.01%)</title><rect x="190.5" y="1141" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="193.53" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (23,405,094 samples, 0.01%)</title><rect x="1012.6" y="1109" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1015.56" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (544,835,945 samples, 0.23%)</title><rect x="541.9" y="1173" width="2.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="544.92" y="1183.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (24,700,573 samples, 0.01%)</title><rect x="1003.8" y="1013" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1006.76" y="1023.5" ></text>
</g>
<g >
<title>[CCAnr] (46,810,801 samples, 0.02%)</title><rect x="709.1" y="1141" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="712.06" y="1151.5" ></text>
</g>
<g >
<title>std::__copy_move_a1&lt;false, int**, int**&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1125" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="406.41" y="1135.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (22,515,147 samples, 0.01%)</title><rect x="906.8" y="1141" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="909.83" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (167,099,141 samples, 0.07%)</title><rect x="868.5" y="1125" width="0.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="871.53" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (70,226,085 samples, 0.03%)</title><rect x="901.8" y="1061" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="904.77" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (66,713,535 samples, 0.03%)</title><rect x="902.5" y="1077" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="905.47" y="1087.5" ></text>
</g>
<g >
<title>alloc_pages_vma (144,026,414 samples, 0.06%)</title><rect x="230.1" y="1141" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="233.07" y="1151.5" ></text>
</g>
<g >
<title>irq_exit (73,358,700 samples, 0.03%)</title><rect x="228.5" y="1173" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="231.52" y="1183.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (48,125,248 samples, 0.02%)</title><rect x="741.9" y="1077" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="744.87" y="1087.5" ></text>
</g>
<g >
<title>__pte_alloc (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1141" width="0.1" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="194.61" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (23,060,279 samples, 0.01%)</title><rect x="538.3" y="1189" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="541.28" y="1199.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (22,609,683 samples, 0.01%)</title><rect x="82.1" y="1253" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="85.14" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (70,649,669 samples, 0.03%)</title><rect x="758.1" y="1093" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="761.06" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (95,069,108 samples, 0.04%)</title><rect x="722.7" y="1077" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="725.67" y="1087.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1141" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1168.56" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (44,651,482 samples, 0.02%)</title><rect x="13.7" y="1173" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="805" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (357,614,854 samples, 0.15%)</title><rect x="577.2" y="1157" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="580.24" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,256,218,056 samples, 0.95%)</title><rect x="1000.5" y="1109" width="11.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1003.48" y="1119.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,001,980 samples, 0.02%)</title><rect x="654.2" y="1141" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="657.22" y="1151.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (71,716,744 samples, 0.03%)</title><rect x="1097.3" y="1189" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1100.28" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="421" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1253" width="0.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1190.94" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (119,306,756 samples, 0.05%)</title><rect x="557.3" y="1173" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="560.34" y="1183.5" ></text>
</g>
<g >
<title>path_lookupat.isra.0 (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1141" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1192.85" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="837" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="847.5" ></text>
</g>
<g >
<title>std::forward&lt;int const&amp;&gt; (48,168,823 samples, 0.02%)</title><rect x="614.8" y="1109" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="617.81" y="1119.5" ></text>
</g>
<g >
<title>CCAnr (236,288,853,727 samples, 99.99%)</title><rect x="10.0" y="1301" width="1179.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="1311.5" >CCAnr</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1237" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.85" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (48,253,854 samples, 0.02%)</title><rect x="617.8" y="1173" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="620.85" y="1183.5" ></text>
</g>
<g >
<title>ixgbe_poll (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1189" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="275.07" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_valptr (93,161,312 samples, 0.04%)</title><rect x="562.2" y="1109" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="565.16" y="1119.5" ></text>
</g>
<g >
<title>memset (72,610,658 samples, 0.03%)</title><rect x="1126.6" y="1173" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1129.55" y="1183.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (94,626,330 samples, 0.04%)</title><rect x="715.4" y="1093" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="718.37" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (1,276,349,057 samples, 0.54%)</title><rect x="195.0" y="1237" width="6.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="198.05" y="1247.5" ></text>
</g>
<g >
<title>__tls_get_addr (20,117,481 samples, 0.01%)</title><rect x="275.6" y="1173" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="278.59" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (23,951,062 samples, 0.01%)</title><rect x="1012.3" y="1125" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1015.32" y="1135.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (22,670,076 samples, 0.01%)</title><rect x="78.8" y="1253" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="81.85" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (143,687,263 samples, 0.06%)</title><rect x="1020.1" y="1109" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1023.13" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (260,932,956 samples, 0.11%)</title><rect x="722.3" y="1109" width="1.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="725.31" y="1119.5" ></text>
</g>
<g >
<title>operator new (71,563,253 samples, 0.03%)</title><rect x="753.1" y="1109" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="756.12" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (23,919,734 samples, 0.01%)</title><rect x="986.3" y="1157" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="989.32" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node_tr&lt;int&gt; (1,840,168,095 samples, 0.78%)</title><rect x="716.7" y="1141" width="9.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="719.65" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (23,947,841 samples, 0.01%)</title><rect x="558.7" y="1141" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="561.73" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (23,987,215 samples, 0.01%)</title><rect x="1127.4" y="1125" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1130.39" y="1135.5" ></text>
</g>
<g >
<title>do_anonymous_page (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1157" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="194.61" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (24,045,890 samples, 0.01%)</title><rect x="874.4" y="1077" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="877.40" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1045" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (24,898,892 samples, 0.01%)</title><rect x="578.9" y="1141" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="581.90" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (9,085,380,098 samples, 3.84%)</title><rect x="573.1" y="1189" width="45.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="576.08" y="1199.5" >std:..</text>
</g>
<g >
<title>__handle_mm_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1173" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="194.61" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,591,338 samples, 0.01%)</title><rect x="277.4" y="1173" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="280.38" y="1183.5" ></text>
</g>
<g >
<title>do_syscall_64 (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1221" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.85" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; (120,074,234 samples, 0.05%)</title><rect x="372.4" y="1221" width="0.6" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="375.38" y="1231.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (45,666,754 samples, 0.02%)</title><rect x="881.1" y="1061" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="884.15" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5,060,887,062 samples, 2.14%)</title><rect x="1052.8" y="1189" width="25.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1055.82" y="1199.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (48,639,611 samples, 0.02%)</title><rect x="1003.6" y="1061" width="0.3" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1006.64" y="1071.5" ></text>
</g>
<g >
<title>random_r (23,668,218 samples, 0.01%)</title><rect x="1146.8" y="1237" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1149.77" y="1247.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (3,865,070,692 samples, 1.64%)</title><rect x="59.4" y="1253" width="19.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="62.43" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="181" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="191.5" ></text>
</g>
<g >
<title>update_process_times (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1093" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1127.05" y="1103.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (48,902,406 samples, 0.02%)</title><rect x="203.2" y="1237" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="206.17" y="1247.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1189" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="148.14" y="1199.5" ></text>
</g>
<g >
<title>__tls_get_addr (144,751,836 samples, 0.06%)</title><rect x="428.9" y="1205" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="431.89" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="981" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="991.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (375,046,537 samples, 0.16%)</title><rect x="1002.5" y="1093" width="1.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1005.48" y="1103.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (23,122,152 samples, 0.01%)</title><rect x="1123.0" y="1205" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1126.00" y="1215.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;::_M_addr (20,167,914 samples, 0.01%)</title><rect x="275.9" y="1141" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="278.92" y="1151.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (23,168,293 samples, 0.01%)</title><rect x="885.5" y="1157" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="888.53" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (46,833,940 samples, 0.02%)</title><rect x="1035.9" y="1077" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1038.94" y="1087.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (164,536,022 samples, 0.07%)</title><rect x="686.1" y="1189" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="689.14" y="1199.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (95,925,211 samples, 0.04%)</title><rect x="713.1" y="1125" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="716.10" y="1135.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1125" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (69,760,352 samples, 0.03%)</title><rect x="1121.2" y="1189" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1124.22" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::begin (186,601,714 samples, 0.08%)</title><rect x="778.1" y="1221" width="0.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="781.11" y="1231.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,086,193 samples, 0.01%)</title><rect x="869.2" y="1093" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="872.25" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (166,810,095 samples, 0.07%)</title><rect x="571.4" y="1173" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="574.45" y="1183.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1141" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="860.08" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (118,198,521 samples, 0.05%)</title><rect x="1039.2" y="1205" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1042.25" y="1215.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (23,990,706 samples, 0.01%)</title><rect x="709.3" y="1141" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="712.29" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (45,473,645 samples, 0.02%)</title><rect x="1099.0" y="1205" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1102.04" y="1215.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt; (153,298,812 samples, 0.06%)</title><rect x="277.0" y="1221" width="0.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="280.04" y="1231.5" ></text>
</g>
<g >
<title>__tls_get_addr (48,829,930 samples, 0.02%)</title><rect x="554.6" y="1205" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="557.64" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (22,763,890 samples, 0.01%)</title><rect x="886.0" y="1157" width="0.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="889.00" y="1167.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (24,355,773 samples, 0.01%)</title><rect x="735.1" y="933" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="738.13" y="943.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (23,308,829 samples, 0.01%)</title><rect x="1089.5" y="1221" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1092.49" y="1231.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::end (515,079,015 samples, 0.22%)</title><rect x="989.0" y="1157" width="2.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="992.03" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,295,194 samples, 0.02%)</title><rect x="576.6" y="1157" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="579.64" y="1167.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::deallocate (22,315,975 samples, 0.01%)</title><rect x="390.2" y="1173" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="393.18" y="1183.5" ></text>
</g>
<g >
<title>std::max&lt;int&gt; (286,489,946 samples, 0.12%)</title><rect x="986.9" y="1157" width="1.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="989.91" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (72,001,012 samples, 0.03%)</title><rect x="1037.6" y="1141" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1040.59" y="1151.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (98,286,417 samples, 0.04%)</title><rect x="1185.2" y="1285" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1188.23" y="1295.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::end (90,879,389 samples, 0.04%)</title><rect x="779.0" y="1221" width="0.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="782.04" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::operator++ (24,055,817 samples, 0.01%)</title><rect x="1091.4" y="1221" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1094.38" y="1231.5" ></text>
</g>
<g >
<title>irq_exit (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1077" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="674.92" y="1087.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="69" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="79.5" ></text>
</g>
<g >
<title>__tls_get_addr (47,085,251 samples, 0.02%)</title><rect x="374.2" y="1221" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="377.17" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false, false&gt;::_Node_iterator (1,028,277,930 samples, 0.44%)</title><rect x="545.3" y="1189" width="5.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="548.35" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (23,949,295 samples, 0.01%)</title><rect x="1125.3" y="1173" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1128.25" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (48,857,495 samples, 0.02%)</title><rect x="875.2" y="1109" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="878.24" y="1119.5" ></text>
</g>
<g >
<title>std::pair&lt;int, int&gt;::pair&lt;int&amp;, int&amp;, true&gt; (544,429,848 samples, 0.23%)</title><rect x="1040.3" y="1205" width="2.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1043.26" y="1215.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (23,350,412 samples, 0.01%)</title><rect x="371.9" y="1221" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="374.91" y="1231.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::begin (48,116,381 samples, 0.02%)</title><rect x="746.7" y="1141" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="749.71" y="1151.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (46,555,398 samples, 0.02%)</title><rect x="374.4" y="1205" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="377.41" y="1215.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (45,689,062 samples, 0.02%)</title><rect x="1149.0" y="1221" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1152.00" y="1231.5" ></text>
</g>
<g >
<title>dl_main (48,902,406 samples, 0.02%)</title><rect x="203.2" y="1253" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="206.17" y="1263.5" ></text>
</g>
<g >
<title>do_mmap (73,421,280 samples, 0.03%)</title><rect x="1185.2" y="1189" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1188.23" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (22,683,111 samples, 0.01%)</title><rect x="897.6" y="1093" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="900.56" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (949,940,371 samples, 0.40%)</title><rect x="773.4" y="1221" width="4.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="776.37" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (21,555,546 samples, 0.01%)</title><rect x="203.9" y="1253" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="206.88" y="1263.5" ></text>
</g>
<g >
<title>__do_page_fault (21,983,235 samples, 0.01%)</title><rect x="1162.6" y="1253" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1165.60" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (114,431,184 samples, 0.05%)</title><rect x="617.3" y="1173" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="620.28" y="1183.5" ></text>
</g>
<g >
<title>tick_sched_handle (22,671,930 samples, 0.01%)</title><rect x="145.1" y="1157" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="148.14" y="1167.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (24,932,012 samples, 0.01%)</title><rect x="747.2" y="1109" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="750.19" y="1119.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,599,721 samples, 0.01%)</title><rect x="557.2" y="1173" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="560.22" y="1183.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (812,161,801 samples, 0.34%)</title><rect x="210.5" y="1269" width="4.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="213.48" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="869" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, false, true&gt;::_Node_iterator (24,837,792 samples, 0.01%)</title><rect x="1049.0" y="1189" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1052.02" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,500,398,327 samples, 1.06%)</title><rect x="1021.4" y="1109" width="12.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1024.44" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (24,111,996 samples, 0.01%)</title><rect x="885.9" y="1157" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="888.88" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;int, true, false&gt;::_Node_iterator (23,587,367 samples, 0.01%)</title><rect x="1125.5" y="1173" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1128.48" y="1183.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (46,815,307 samples, 0.02%)</title><rect x="908.9" y="1189" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="911.93" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (22,896,091 samples, 0.01%)</title><rect x="677.8" y="1189" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="680.76" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::deque&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (167,028,672 samples, 0.07%)</title><rect x="933.8" y="1189" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="936.77" y="1199.5" ></text>
</g>
<g >
<title>skb_release_data (20,121,783 samples, 0.01%)</title><rect x="671.9" y="741" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="674.92" y="751.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (23,718,716 samples, 0.01%)</title><rect x="1094.9" y="1221" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1097.88" y="1231.5" ></text>
</g>
<g >
<title>__tls_get_addr (23,961,141 samples, 0.01%)</title><rect x="1006.1" y="1077" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1009.14" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (23,001,624 samples, 0.01%)</title><rect x="701.5" y="1157" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="704.55" y="1167.5" ></text>
</g>
<g >
<title>handle_mm_fault (119,301,006 samples, 0.05%)</title><rect x="196.9" y="1141" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="199.94" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (47,314,591 samples, 0.02%)</title><rect x="618.6" y="1189" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="621.57" y="1199.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (1,278,612,576 samples, 0.54%)</title><rect x="204.1" y="1269" width="6.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="207.10" y="1279.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (328,397,771 samples, 0.14%)</title><rect x="173.9" y="1269" width="1.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="176.90" y="1279.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::size (191,537,475 samples, 0.08%)</title><rect x="1075.0" y="1173" width="0.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1077.98" y="1183.5" ></text>
</g>
<g >
<title>rmqueue (23,256,994 samples, 0.01%)</title><rect x="230.7" y="1093" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="233.67" y="1103.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,518,448 samples, 0.01%)</title><rect x="557.1" y="1173" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="560.10" y="1183.5" ></text>
</g>
<g >
<title>do_IRQ (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1077" width="0.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="895.56" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (256,888,166 samples, 0.11%)</title><rect x="896.0" y="1093" width="1.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="899.04" y="1103.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::__small_size_threshold (96,218,948 samples, 0.04%)</title><rect x="1061.7" y="1173" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1064.71" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="1109" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (23,933,864 samples, 0.01%)</title><rect x="875.1" y="1077" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="878.12" y="1087.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (71,305,855 samples, 0.03%)</title><rect x="740.0" y="1045" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="742.96" y="1055.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;int, true, false&gt;&amp;, bool, true&gt; (164,260,103 samples, 0.07%)</title><rect x="766.8" y="1141" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="769.76" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (46,391,080 samples, 0.02%)</title><rect x="1066.6" y="1157" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1069.57" y="1167.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (23,094,884 samples, 0.01%)</title><rect x="232.5" y="1237" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="235.45" y="1247.5" ></text>
</g>
<g >
<title>std::copy&lt;int**, int**&gt; (46,388,414 samples, 0.02%)</title><rect x="403.4" y="1157" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="406.41" y="1167.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,003,453 samples, 0.01%)</title><rect x="1095.4" y="1205" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1098.36" y="1215.5" ></text>
</g>
<g >
<title>__handle_mm_fault (145,051,908 samples, 0.06%)</title><rect x="188.9" y="1173" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="191.86" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (140,068,355 samples, 0.06%)</title><rect x="503.2" y="1109" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="506.18" y="1119.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (24,704,099 samples, 0.01%)</title><rect x="709.4" y="1141" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="712.41" y="1151.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (412,826,241 samples, 0.17%)</title><rect x="950.9" y="1157" width="2.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="953.89" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_ptr (70,226,085 samples, 0.03%)</title><rect x="901.8" y="1045" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="904.77" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_Node_iterator_base (613,579,484 samples, 0.26%)</title><rect x="547.4" y="1173" width="3.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="550.42" y="1183.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_M_set_node (92,424,052 samples, 0.04%)</title><rect x="390.4" y="1189" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="393.40" y="1199.5" ></text>
</g>
<g >
<title>operator delete (71,351,810 samples, 0.03%)</title><rect x="1128.4" y="1109" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1131.36" y="1119.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (22,429,821 samples, 0.01%)</title><rect x="1124.1" y="1173" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1127.05" y="1183.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::find (45,437,781 samples, 0.02%)</title><rect x="1038.3" y="1173" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1041.32" y="1183.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2,714,778,835 samples, 1.15%)</title><rect x="913.0" y="1189" width="13.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="916.03" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (24,322,135 samples, 0.01%)</title><rect x="667.3" y="1125" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="670.33" y="1135.5" ></text>
</g>
<g >
<title>do_user_addr_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1205" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="194.61" y="1215.5" ></text>
</g>
<g >
<title>net_rx_action (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1077" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1076.47" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,297,516,722 samples, 0.55%)</title><rect x="462.9" y="1173" width="6.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="465.89" y="1183.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1221" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="275.07" y="1231.5" ></text>
</g>
<g >
<title>[CCAnr] (23,950,355 samples, 0.01%)</title><rect x="554.5" y="1205" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="557.52" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (22,822,795 samples, 0.01%)</title><rect x="590.5" y="1141" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="593.48" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (47,044,673 samples, 0.02%)</title><rect x="904.4" y="1125" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="907.36" y="1135.5" ></text>
</g>
<g >
<title>unmap_vmas (120,294,246 samples, 0.05%)</title><rect x="1187.9" y="1173" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1190.94" y="1183.5" ></text>
</g>
<g >
<title>tick_sched_timer (24,355,773 samples, 0.01%)</title><rect x="735.1" y="1045" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="738.13" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (357,384,626 samples, 0.15%)</title><rect x="714.2" y="1125" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="717.17" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,714,154,661 samples, 1.15%)</title><rect x="1020.9" y="1125" width="13.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1023.85" y="1135.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (22,910,276 samples, 0.01%)</title><rect x="231.3" y="1205" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="234.26" y="1215.5" ></text>
</g>
<g >
<title>[CCAnr] (48,170,341 samples, 0.02%)</title><rect x="439.7" y="1205" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="442.71" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_v (282,518,415 samples, 0.12%)</title><rect x="1119.8" y="1189" width="1.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1122.81" y="1199.5" ></text>
</g>
<g >
<title>nf_hook_slow (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1045" width="0.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="275.07" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (211,690,609 samples, 0.09%)</title><rect x="532.9" y="1141" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="535.89" y="1151.5" ></text>
</g>
<g >
<title>do_anonymous_page (120,405,229 samples, 0.05%)</title><rect x="189.0" y="1157" width="0.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="191.98" y="1167.5" ></text>
</g>
<g >
<title>__tls_get_addr (69,871,195 samples, 0.03%)</title><rect x="689.2" y="1205" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="692.22" y="1215.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (24,673,563 samples, 0.01%)</title><rect x="1129.3" y="1141" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1132.32" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="309" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (142,063,222 samples, 0.06%)</title><rect x="1031.2" y="1061" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1034.21" y="1071.5" ></text>
</g>
<g >
<title>ret_from_intr (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1141" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1076.47" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (235,142,483 samples, 0.10%)</title><rect x="655.4" y="1125" width="1.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="658.40" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (23,992,160 samples, 0.01%)</title><rect x="469.3" y="1109" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="472.25" y="1119.5" ></text>
</g>
<g >
<title>ret_from_intr (20,117,267 samples, 0.01%)</title><rect x="272.1" y="1269" width="0.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="275.07" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (88,942,245 samples, 0.04%)</title><rect x="882.5" y="1109" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="885.53" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (736,062,040 samples, 0.31%)</title><rect x="560.3" y="1141" width="3.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="563.27" y="1151.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="373" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (140,140,115 samples, 0.06%)</title><rect x="884.2" y="1141" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="887.15" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (48,248,886 samples, 0.02%)</title><rect x="551.8" y="1205" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="554.79" y="1215.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,271,800 samples, 0.02%)</title><rect x="876.9" y="1093" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="879.88" y="1103.5" ></text>
</g>
<g >
<title>alloc_pages_current (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1109" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="194.61" y="1119.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::_Auto_node::_M_insert (20,134,724 samples, 0.01%)</title><rect x="275.4" y="1205" width="0.1" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="278.39" y="1215.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (120,361,962 samples, 0.05%)</title><rect x="598.6" y="1109" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="601.61" y="1119.5" ></text>
</g>
<g >
<title>computePairScore (24,093,021,495 samples, 10.20%)</title><rect x="790.5" y="1205" width="120.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="793.50" y="1215.5" >computePairScore</text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (118,005,068 samples, 0.05%)</title><rect x="544.6" y="1173" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="547.64" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (140,139,709 samples, 0.06%)</title><rect x="1012.8" y="1125" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1015.79" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (23,043,691 samples, 0.01%)</title><rect x="723.1" y="1061" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="726.15" y="1071.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (274,600,489 samples, 0.12%)</title><rect x="460.4" y="1173" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="463.41" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (70,350,670 samples, 0.03%)</title><rect x="1011.9" y="1109" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1014.86" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (812,161,801 samples, 0.34%)</title><rect x="210.5" y="1237" width="4.0" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="213.48" y="1247.5" ></text>
</g>
<g >
<title>__do_page_fault (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1237" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1168.56" y="1247.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::allocate (46,542,406 samples, 0.02%)</title><rect x="203.6" y="1269" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="206.65" y="1279.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (66,357,938 samples, 0.03%)</title><rect x="185.5" y="1269" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="188.47" y="1279.5" ></text>
</g>
<g >
<title>__tls_get_addr (95,743,221 samples, 0.04%)</title><rect x="575.5" y="1173" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="578.55" y="1183.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (24,045,276 samples, 0.01%)</title><rect x="885.8" y="1157" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="888.76" y="1167.5" ></text>
</g>
<g >
<title>is_qualified_pairs (4,767,841,220 samples, 2.02%)</title><rect x="910.8" y="1205" width="23.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="913.80" y="1215.5" >i..</text>
</g>
<g >
<title>__asan::GetCurrentThread (141,967,563 samples, 0.06%)</title><rect x="234.4" y="1285" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="237.40" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (70,246,119 samples, 0.03%)</title><rect x="667.0" y="1125" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="669.98" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (118,057,144 samples, 0.05%)</title><rect x="914.1" y="1173" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="917.12" y="1183.5" ></text>
</g>
<g >
<title>alloc_pages_vma (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1157" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1168.56" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;int, false&gt;::_Node_iterator_base (20,103,126 samples, 0.01%)</title><rect x="743.4" y="1109" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="746.41" y="1119.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (24,693,992 samples, 0.01%)</title><rect x="711.9" y="1125" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="714.91" y="1135.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (23,957,961 samples, 0.01%)</title><rect x="614.2" y="1093" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="617.21" y="1103.5" ></text>
</g>
<g >
<title>pthread_getspecific (141,768,360 samples, 0.06%)</title><rect x="200.7" y="1221" width="0.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="203.71" y="1231.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView&gt;::Allocate (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1269" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="194.61" y="1279.5" ></text>
</g>
<g >
<title>__do_page_fault (618,102,425 samples, 0.26%)</title><rect x="228.3" y="1237" width="3.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="231.28" y="1247.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (23,946,313 samples, 0.01%)</title><rect x="666.3" y="1093" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="669.28" y="1103.5" ></text>
</g>
<g >
<title>handle_mm_fault (145,051,908 samples, 0.06%)</title><rect x="188.9" y="1189" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="191.86" y="1199.5" ></text>
</g>
<g >
<title>std::hash&lt;long long&gt;::operator (47,525,312 samples, 0.02%)</title><rect x="1025.7" y="1061" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1028.67" y="1071.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (20,124,996 samples, 0.01%)</title><rect x="857.2" y="1173" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="860.21" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (434,989,780 samples, 0.18%)</title><rect x="1127.3" y="1157" width="2.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1130.27" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (24,002,095 samples, 0.01%)</title><rect x="1025.3" y="1061" width="0.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1028.32" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,173,327,729 samples, 0.50%)</title><rect x="898.3" y="1109" width="5.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="901.26" y="1119.5" ></text>
</g>
<g >
<title>run_timer_softirq (24,992,148 samples, 0.01%)</title><rect x="857.1" y="1093" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="860.08" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (165,771,115 samples, 0.07%)</title><rect x="543.8" y="1157" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="546.81" y="1167.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; (47,768,118 samples, 0.02%)</title><rect x="1128.7" y="1109" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1131.72" y="1119.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (1,744,957,473 samples, 0.74%)</title><rect x="17.8" y="1237" width="8.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="20.76" y="1247.5" ></text>
</g>
<g >
<title>ixgbe_poll (20,122,582 samples, 0.01%)</title><rect x="892.6" y="1013" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="895.56" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_hash_traits&lt;pair_hash&gt;::__small_size_threshold (95,759,326 samples, 0.04%)</title><rect x="1076.1" y="1173" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1079.06" y="1183.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (4,114,956,004 samples, 1.74%)</title><rect x="31.9" y="1253" width="20.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="34.89" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="245" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="255.5" ></text>
</g>
<g >
<title>computePairScore (20,480,033,521 samples, 8.67%)</title><rect x="936.5" y="1189" width="102.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="939.52" y="1199.5" >computePairS..</text>
</g>
<g >
<title>__lsan::ForEachChunk (179,589,708 samples, 0.08%)</title><rect x="185.9" y="1269" width="0.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="188.92" y="1279.5" ></text>
</g>
<g >
<title>pick_var_1 (23,426,587 samples, 0.01%)</title><rect x="1157.1" y="1253" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1160.10" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (116,764,622 samples, 0.05%)</title><rect x="509.2" y="1125" width="0.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="512.22" y="1135.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos (90,191,114 samples, 0.04%)</title><rect x="277.3" y="1205" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="280.26" y="1215.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (46,327,742 samples, 0.02%)</title><rect x="901.9" y="1029" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="904.89" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="325" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (48,115,132 samples, 0.02%)</title><rect x="793.4" y="1189" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="796.44" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::operator== (94,489,849 samples, 0.04%)</title><rect x="857.5" y="1173" width="0.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="860.54" y="1183.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (23,658,636 samples, 0.01%)</title><rect x="1019.8" y="1109" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1022.78" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1,983,895,619 samples, 0.84%)</title><rect x="555.1" y="1205" width="9.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="558.11" y="1215.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (239,826,714 samples, 0.10%)</title><rect x="231.4" y="1269" width="1.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="234.37" y="1279.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (121,293,543 samples, 0.05%)</title><rect x="1125.6" y="1189" width="0.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1128.60" y="1199.5" ></text>
</g>
<g >
<title>[unknown] (21,498,033 samples, 0.01%)</title><rect x="13.7" y="357" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="16.73" y="367.5" ></text>
</g>
<g >
<title>pick_var_1 (13,656,452,403 samples, 5.78%)</title><rect x="1078.6" y="1237" width="68.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1081.58" y="1247.5" >pick_va..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_ptr (47,766,994 samples, 0.02%)</title><rect x="564.5" y="1157" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="567.54" y="1167.5" ></text>
</g>
<g >
<title>x86_pmu_enable (24,355,773 samples, 0.01%)</title><rect x="735.1" y="949" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="738.13" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_valptr (47,175,572 samples, 0.02%)</title><rect x="880.8" y="1077" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="883.80" y="1087.5" ></text>
</g>
<g >
<title>page_fault (642,136,414 samples, 0.27%)</title><rect x="228.2" y="1269" width="3.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="231.16" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (117,625,498 samples, 0.05%)</title><rect x="762.9" y="1109" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="765.86" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (120,172,818 samples, 0.05%)</title><rect x="381.4" y="1221" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="384.35" y="1231.5" ></text>
</g>
<g >
<title>[unknown] (46,542,406 samples, 0.02%)</title><rect x="203.6" y="1253" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="206.65" y="1263.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (23,161,563 samples, 0.01%)</title><rect x="999.4" y="1029" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1002.42" y="1039.5" ></text>
</g>
<g >
<title>[unknown] (47,151,148 samples, 0.02%)</title><rect x="1130.0" y="1173" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1133.02" y="1183.5" ></text>
</g>
<g >
<title>free_unref_page (20,121,783 samples, 0.01%)</title><rect x="671.9" y="709" width="0.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="674.92" y="719.5" ></text>
</g>
<g >
<title>std::__detail::operator!= (868,897,445 samples, 0.37%)</title><rect x="382.0" y="1221" width="4.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="384.95" y="1231.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (217,423,720 samples, 0.09%)</title><rect x="188.5" y="1269" width="1.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="191.49" y="1279.5" ></text>
</g>
<g >
<title>[CCAnr] (48,273,244 samples, 0.02%)</title><rect x="1043.2" y="1189" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1046.21" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (359,115,766 samples, 0.15%)</title><rect x="1019.1" y="1125" width="1.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1022.06" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (122,887,445 samples, 0.05%)</title><rect x="890.4" y="1125" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="893.42" y="1135.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (165,514,246 samples, 0.07%)</title><rect x="709.5" y="1141" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="712.54" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (47,934,452 samples, 0.02%)</title><rect x="867.9" y="1125" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="870.93" y="1135.5" ></text>
</g>
<g >
<title>__tls_get_addr (138,842,439 samples, 0.06%)</title><rect x="1051.4" y="1189" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1054.42" y="1199.5" ></text>
</g>
<g >
<title>ixgbe_clean_rx_irq (20,122,582 samples, 0.01%)</title><rect x="892.6" y="997" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="895.56" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;, true&gt;::_M_get (24,072,270 samples, 0.01%)</title><rect x="597.2" y="1125" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="600.20" y="1135.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (21,498,033 samples, 0.01%)</title><rect x="13.7" y="37" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="16.73" y="47.5" ></text>
</g>
<g >
<title>clauseSatisfiedWithFlips (184,265,774 samples, 0.08%)</title><rect x="938.9" y="1173" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="941.90" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;, false&gt;::_Node_iterator_base (190,719,801 samples, 0.08%)</title><rect x="550.5" y="1189" width="0.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="553.48" y="1199.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (23,450,465 samples, 0.01%)</title><rect x="690.0" y="1109" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="693.04" y="1119.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (229,854,712 samples, 0.10%)</title><rect x="1163.8" y="1253" width="1.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1166.83" y="1263.5" ></text>
</g>
<g >
<title>__libc_start_main (177,247,863,762 samples, 75.00%)</title><rect x="272.2" y="1285" width="885.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="275.17" y="1295.5" >__libc_start_main</text>
</g>
<g >
<title>std::unordered_map&lt;long long, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::hash&lt;long long&gt;, std::equal_to&lt;long long&gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::find (4,598,367,055 samples, 1.95%)</title><rect x="991.6" y="1157" width="23.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="994.61" y="1167.5" >s..</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt; &gt;::find (206,606,873 samples, 0.09%)</title><rect x="1152.2" y="1237" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1155.20" y="1247.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (20,121,573 samples, 0.01%)</title><rect x="1073.5" y="1093" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1076.47" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, true&gt;::_Node_iterator_base (22,078,838 samples, 0.01%)</title><rect x="1099.2" y="1173" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1102.15" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code_tr&lt;int&gt; (331,601,060 samples, 0.14%)</title><rect x="750.0" y="1141" width="1.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="753.03" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (71,851,990 samples, 0.03%)</title><rect x="603.6" y="1141" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="606.63" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (23,022,528 samples, 0.01%)</title><rect x="1016.2" y="1141" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1019.20" y="1151.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (24,074,737 samples, 0.01%)</title><rect x="675.3" y="1157" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="678.30" y="1167.5" ></text>
</g>
<g >
<title>ptep_clear_flush (24,868,799 samples, 0.01%)</title><rect x="231.1" y="1141" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="234.13" y="1151.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (23,001,624 samples, 0.01%)</title><rect x="701.5" y="1109" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="704.55" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (24,035,852 samples, 0.01%)</title><rect x="657.0" y="1157" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="660.03" y="1167.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (24,873,310 samples, 0.01%)</title><rect x="913.6" y="1173" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="916.63" y="1183.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::pair&lt;int, int&gt;, std::pair&lt;std::pair&lt;int, int&gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::begin (71,445,699 samples, 0.03%)</title><rect x="1052.2" y="1189" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1055.23" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_node_allocator (24,364,645 samples, 0.01%)</title><rect x="1129.2" y="1141" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1132.20" y="1151.5" ></text>
</g>
<g >
<title>__handle_mm_fault (425,351,967 samples, 0.18%)</title><rect x="229.1" y="1189" width="2.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="232.13" y="1199.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (280,742,382 samples, 0.12%)</title><rect x="1169.7" y="1285" width="1.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1172.68" y="1295.5" ></text>
</g>
<g >
<title>__interceptor___tls_get_addr (119,373,240 samples, 0.05%)</title><rect x="710.4" y="1141" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="713.36" y="1151.5" ></text>
</g>
<g >
<title>filename_lookup (29,084,491 samples, 0.01%)</title><rect x="1189.9" y="1157" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1192.85" y="1167.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::_S_buffer_size (187,287,538 samples, 0.08%)</title><rect x="932.6" y="1157" width="0.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="935.59" y="1167.5" ></text>
</g>
<g >
<title>ip_sublist_rcv_finish (20,121,783 samples, 0.01%)</title><rect x="671.9" y="917" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="674.92" y="927.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_addr (22,931,053 samples, 0.01%)</title><rect x="758.3" y="1061" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="761.30" y="1071.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::pair&lt;int, int&gt;, int, pair_hash, std::equal_to&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;int, int&gt; const, int&gt; &gt; &gt;::end (117,677,369 samples, 0.05%)</title><rect x="565.0" y="1221" width="0.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="568.02" y="1231.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;int, int&amp;, int*&gt;::operator* (71,204,048 samples, 0.03%)</title><rect x="916.4" y="1173" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="919.37" y="1183.5" ></text>
</g>
<g >
<title>__do_page_fault (24,358,904 samples, 0.01%)</title><rect x="191.6" y="1221" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="194.61" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;int, int&gt; const*, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::__normal_iterator (94,408,290 samples, 0.04%)</title><rect x="778.6" y="1205" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="781.57" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (97,443,533 samples, 0.04%)</title><rect x="687.1" y="1205" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="690.07" y="1215.5" ></text>
</g>
<g >
<title>flip (159,826,934,278 samples, 67.63%)</title><rect x="280.5" y="1237" width="798.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="283.52" y="1247.5" >flip</text>
</g>
<g >
<title>__hrtimer_get_next_event (23,176,123 samples, 0.01%)</title><rect x="1147.6" y="1157" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1150.58" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_v (211,458,298 samples, 0.09%)</title><rect x="1035.1" y="1125" width="1.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1038.12" y="1135.5" ></text>
</g>
<g >
<title>handle_mm_fault (449,326,939 samples, 0.19%)</title><rect x="229.0" y="1205" width="2.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="232.01" y="1215.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (4,072,762,463 samples, 1.72%)</title><rect x="238.9" y="1285" width="20.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="241.89" y="1295.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::erase (23,848,823 samples, 0.01%)</title><rect x="380.2" y="1221" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="383.23" y="1231.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (95,812,270 samples, 0.04%)</title><rect x="1043.7" y="1189" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1046.66" y="1199.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (22,727,088 samples, 0.01%)</title><rect x="203.5" y="1237" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="206.53" y="1247.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (408,824,234 samples, 0.17%)</title><rect x="867.3" y="1141" width="2.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="870.33" y="1151.5" ></text>
</g>
<g >
<title>get_page_from_freelist (72,096,271 samples, 0.03%)</title><rect x="196.9" y="1061" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="199.94" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false, false&gt;::_Node_iterator (42,906,242 samples, 0.02%)</title><rect x="885.3" y="1157" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="888.31" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_Node_iterator_base (23,181,889 samples, 0.01%)</title><rect x="863.0" y="1141" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="865.97" y="1151.5" ></text>
</g>
<g >
<title>__tls_get_addr (93,689,387 samples, 0.04%)</title><rect x="1108.6" y="1205" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1111.60" y="1215.5" ></text>
</g>
<g >
<title>__interceptor_clock_gettime.part.0 (96,241,025 samples, 0.04%)</title><rect x="1148.5" y="1221" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1151.52" y="1231.5" ></text>
</g>
<g >
<title>std::deque&lt;int, std::allocator&lt;int&gt; &gt;::push_back (70,412,586 samples, 0.03%)</title><rect x="1149.8" y="1237" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1152.85" y="1247.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::_M_addr (71,897,278 samples, 0.03%)</title><rect x="1030.4" y="1013" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1033.38" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;int&gt;::_M_valptr (22,683,390 samples, 0.01%)</title><rect x="594.3" y="1157" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="597.28" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (7,227,620,998 samples, 3.06%)</title><rect x="637.7" y="1173" width="36.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="640.71" y="1183.5" >std..</text>
</g>
<g >
<title>clear_page_erms (95,901,282 samples, 0.04%)</title><rect x="230.2" y="1093" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="233.19" y="1103.5" ></text>
</g>
<g >
<title>[unknown] (94,626,330 samples, 0.04%)</title><rect x="715.4" y="1109" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="718.37" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_ConvertToValueType&lt;std::__detail::_Identity, int&gt;::operator (22,654,751 samples, 0.01%)</title><rect x="773.1" y="1189" width="0.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="776.13" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_erase (22,970,920 samples, 0.01%)</title><rect x="572.8" y="1205" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="575.84" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (24,233,198 samples, 0.01%)</title><rect x="904.7" y="1141" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="907.71" y="1151.5" ></text>
</g>
<g >
<title>__netif_receive_skb_list_core (20,121,783 samples, 0.01%)</title><rect x="671.9" y="965" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="674.92" y="975.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;int&gt;::_M_ptr (115,814,064 samples, 0.05%)</title><rect x="666.4" y="1093" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="669.40" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (23,160,199 samples, 0.01%)</title><rect x="635.6" y="1173" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="638.58" y="1183.5" ></text>
</g>
<g >
<title>[libasan.so.8.0.0] (22,822,973 samples, 0.01%)</title><rect x="889.6" y="1125" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="892.59" y="1135.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long long&gt;, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (755,295,036 samples, 0.32%)</title><rect x="995.9" y="1125" width="3.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="998.88" y="1135.5" ></text>
</g>
<g >
<title>ip_sublist_rcv (20,121,783 samples, 0.01%)</title><rect x="671.9" y="933" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="674.92" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (47,942,583 samples, 0.02%)</title><rect x="910.6" y="1189" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="913.56" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (93,458,842 samples, 0.04%)</title><rect x="809.2" y="1173" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="812.22" y="1183.5" ></text>
</g>
<g >
<title>__asan::asan_delete (22,315,975 samples, 0.01%)</title><rect x="390.2" y="1157" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="393.18" y="1167.5" ></text>
</g>
<g >
<title>[CCAnr] (47,644,166 samples, 0.02%)</title><rect x="996.5" y="1109" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="999.47" y="1119.5" ></text>
</g>
<g >
<title>do_anonymous_page (23,917,357 samples, 0.01%)</title><rect x="1165.6" y="1173" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1168.56" y="1183.5" ></text>
</g>
<g >
<title>unmap_page_range (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1093" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1188.35" y="1103.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::erase (22,708,306 samples, 0.01%)</title><rect x="1153.7" y="1237" width="0.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1156.71" y="1247.5" ></text>
</g>
<g >
<title>unmap_vmas (24,786,982 samples, 0.01%)</title><rect x="1185.4" y="1125" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1188.35" y="1135.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (20,121,783 samples, 0.01%)</title><rect x="671.9" y="1061" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="674.92" y="1071.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (132,892,752 samples, 0.06%)</title><rect x="379.1" y="1221" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="382.11" y="1231.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; &gt;::_M_addr (67,776,739 samples, 0.03%)</title><rect x="505.5" y="1093" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="508.52" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (164,666,830 samples, 0.07%)</title><rect x="427.1" y="1205" width="0.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="430.12" y="1215.5" ></text>
</g>
<g >
<title>__asan::GetFakeStackFast (22,675,644 samples, 0.01%)</title><rect x="1107.4" y="1205" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1110.42" y="1215.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt; const&amp;&gt; (71,757,267 samples, 0.03%)</title><rect x="509.8" y="1125" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="512.81" y="1135.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1093" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="751.96" y="1103.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (280,482,950 samples, 0.12%)</title><rect x="1046.7" y="1157" width="1.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1049.67" y="1167.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (24,578,698 samples, 0.01%)</title><rect x="910.4" y="1189" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="913.44" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (13,062,047,420 samples, 5.53%)</title><rect x="621.7" y="1205" width="65.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="624.74" y="1215.5" >std::_H..</text>
</g>
<g >
<title>[unknown] (280,482,950 samples, 0.12%)</title><rect x="1046.7" y="1173" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1049.67" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long long, std::pair&lt;long long const, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (70,111,760 samples, 0.03%)</title><rect x="905.4" y="1125" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="908.42" y="1135.5" ></text>
</g>
<g >
<title>alloc_pages_vma (49,078,912 samples, 0.02%)</title><rect x="190.3" y="1141" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="193.29" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (92,721,893 samples, 0.04%)</title><rect x="608.0" y="1157" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="610.99" y="1167.5" ></text>
</g>
<g >
<title>interrupt_entry (21,909,281 samples, 0.01%)</title><rect x="228.1" y="1269" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="231.06" y="1279.5" ></text>
</g>
<g >
<title>clockevents_program_event (24,020,161 samples, 0.01%)</title><rect x="749.0" y="1061" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="751.96" y="1071.5" ></text>
</g>
<g >
<title>pthread_getspecific (5,572,803,743 samples, 2.36%)</title><rect x="145.4" y="1253" width="27.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="148.36" y="1263.5" >p..</text>
</g>
<g >
<title>hrtimer_interrupt (23,548,064 samples, 0.01%)</title><rect x="374.5" y="1189" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="377.52" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_aux&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (14,672,203,225 samples, 6.21%)</title><rect x="698.0" y="1173" width="73.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="700.97" y="1183.5" >std::_Ha..</text>
</g>
<g >
<title>ip_local_deliver (20,121,783 samples, 0.01%)</title><rect x="671.9" y="901" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="674.92" y="911.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_0 (167,815,864 samples, 0.07%)</title><rect x="860.0" y="1157" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="863.03" y="1167.5" ></text>
</g>
</g>
</svg>
